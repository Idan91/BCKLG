{"ast":null,"code":"const _require = require('./utils'),\n      pather = _require.pather,\n      fetchPage = _require.fetchPage,\n      single = _require.single,\n      collection = _require.collection;\n\nconst formatters = require('./formatters');\n\nconst usersPather = pather('users');\n\nconst games = fetcher => user => async statuses => {\n  const filteredStatuses = typeof statuses === 'string' ? statuses : statuses.join(',');\n  const path = usersPather(user, 'games', `?page=1&statuses=${filteredStatuses}`);\n  const json = await fetcher.get(path);\n  const formatted = json.results.map(formatters.formatGame);\n  return collection(fetcher)(json, formatted, formatters.formatGame);\n};\n\nconst profile = fetcher => user => async () => {\n  const path = usersPather(user);\n  const json = await fetcher.get(path);\n  const formatted = formatters.formatProfile(json);\n  return single(fetcher)(json, formatted);\n};\n\nconst favorite = fetcher => user => async () => {\n  const path = usersPather(user, 'favorites');\n  const json = await fetcher.get(path);\n  const formatted = json.results.map(formatters.formatGame);\n  return collection(fetcher)(json, formatted, formatters.formatGame);\n};\n\nconst collections = fetcher => user => async () => {\n  const path = usersPather(user, 'collections');\n  const json = await fetcher.get(path);\n  const formatted = json.results.map(formatters.formatCollection);\n  return collection(fetcher)(json, formatted, formatters.formatCollection);\n};\n\nconst reviews = fetcher => user => async () => {\n  const path = usersPather(user, 'reviews');\n  const json = await fetcher.get(path);\n  const formatted = json.results.map(formatters.formatReviews);\n  return collection(fetcher)(json, formatted, formatters.formatReviews);\n};\n\nconst update = fetcher => user => () => ({\n  game: updateGame(fetcher)(user)\n});\n\nconst updateGame = fetcher => user => async (id, data) => {\n  const path = usersPather('current', `games/${id}`);\n  const json = await fetcher.patch(path, data);\n  return single(fetcher)(json, { ...json,\n    user\n  });\n};\n\nconst users = fetcher => user => ({\n  profile: profile(fetcher)(user),\n  favorite: favorite(fetcher)(user),\n  games: games(fetcher)(user),\n  collections: collections(fetcher)(user),\n  reviews: reviews(fetcher)(user),\n  update: update(fetcher)(user)\n});\n\nmodule.exports = fetcher => users(fetcher);","map":{"version":3,"sources":["/Users/Idan/Projects/Dev/BCKLG/v2/BCKLG/bcklg/node_modules/rawger/src/users.js"],"names":["require","pather","fetchPage","single","collection","formatters","usersPather","games","fetcher","user","statuses","filteredStatuses","join","path","json","get","formatted","results","map","formatGame","profile","formatProfile","favorite","collections","formatCollection","reviews","formatReviews","update","game","updateGame","id","data","patch","users","module","exports"],"mappings":"iBAAkDA,OAAO,CAAC,SAAD,C;MAAjDC,M,YAAAA,M;MAAQC,S,YAAAA,S;MAAWC,M,YAAAA,M;MAAQC,U,YAAAA,U;;AACnC,MAAMC,UAAU,GAAGL,OAAO,CAAC,cAAD,CAA1B;;AAEA,MAAMM,WAAW,GAAGL,MAAM,CAAC,OAAD,CAA1B;;AAEA,MAAMM,KAAK,GAAGC,OAAO,IAAIC,IAAI,IAAI,MAAMC,QAAN,IAAkB;AACjD,QAAMC,gBAAgB,GACpB,OAAOD,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0CA,QAAQ,CAACE,IAAT,CAAc,GAAd,CAD5C;AAEA,QAAMC,IAAI,GAAGP,WAAW,CACtBG,IADsB,EAEtB,OAFsB,EAGrB,oBAAmBE,gBAAiB,EAHf,CAAxB;AAKA,QAAMG,IAAI,GAAG,MAAMN,OAAO,CAACO,GAAR,CAAYF,IAAZ,CAAnB;AAEA,QAAMG,SAAS,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBb,UAAU,CAACc,UAA5B,CAAlB;AACA,SAAOf,UAAU,CAACI,OAAD,CAAV,CAAoBM,IAApB,EAA0BE,SAA1B,EAAqCX,UAAU,CAACc,UAAhD,CAAP;AACD,CAZD;;AAcA,MAAMC,OAAO,GAAGZ,OAAO,IAAIC,IAAI,IAAI,YAAY;AAC7C,QAAMI,IAAI,GAAGP,WAAW,CAACG,IAAD,CAAxB;AACA,QAAMK,IAAI,GAAG,MAAMN,OAAO,CAACO,GAAR,CAAYF,IAAZ,CAAnB;AAEA,QAAMG,SAAS,GAAGX,UAAU,CAACgB,aAAX,CAAyBP,IAAzB,CAAlB;AACA,SAAOX,MAAM,CAACK,OAAD,CAAN,CAAgBM,IAAhB,EAAsBE,SAAtB,CAAP;AACD,CAND;;AAQA,MAAMM,QAAQ,GAAGd,OAAO,IAAIC,IAAI,IAAI,YAAY;AAC9C,QAAMI,IAAI,GAAGP,WAAW,CAACG,IAAD,EAAO,WAAP,CAAxB;AACA,QAAMK,IAAI,GAAG,MAAMN,OAAO,CAACO,GAAR,CAAYF,IAAZ,CAAnB;AAEA,QAAMG,SAAS,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBb,UAAU,CAACc,UAA5B,CAAlB;AACA,SAAOf,UAAU,CAACI,OAAD,CAAV,CAAoBM,IAApB,EAA0BE,SAA1B,EAAqCX,UAAU,CAACc,UAAhD,CAAP;AACD,CAND;;AAQA,MAAMI,WAAW,GAAGf,OAAO,IAAIC,IAAI,IAAI,YAAY;AACjD,QAAMI,IAAI,GAAGP,WAAW,CAACG,IAAD,EAAO,aAAP,CAAxB;AACA,QAAMK,IAAI,GAAG,MAAMN,OAAO,CAACO,GAAR,CAAYF,IAAZ,CAAnB;AAEA,QAAMG,SAAS,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBb,UAAU,CAACmB,gBAA5B,CAAlB;AACA,SAAOpB,UAAU,CAACI,OAAD,CAAV,CAAoBM,IAApB,EAA0BE,SAA1B,EAAqCX,UAAU,CAACmB,gBAAhD,CAAP;AACD,CAND;;AAQA,MAAMC,OAAO,GAAGjB,OAAO,IAAIC,IAAI,IAAI,YAAY;AAC7C,QAAMI,IAAI,GAAGP,WAAW,CAACG,IAAD,EAAO,SAAP,CAAxB;AACA,QAAMK,IAAI,GAAG,MAAMN,OAAO,CAACO,GAAR,CAAYF,IAAZ,CAAnB;AAEA,QAAMG,SAAS,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAiBb,UAAU,CAACqB,aAA5B,CAAlB;AACA,SAAOtB,UAAU,CAACI,OAAD,CAAV,CAAoBM,IAApB,EAA0BE,SAA1B,EAAqCX,UAAU,CAACqB,aAAhD,CAAP;AACD,CAND;;AAQA,MAAMC,MAAM,GAAGnB,OAAO,IAAIC,IAAI,IAAI,OAAO;AACvCmB,EAAAA,IAAI,EAAEC,UAAU,CAACrB,OAAD,CAAV,CAAoBC,IAApB;AADiC,CAAP,CAAlC;;AAIA,MAAMoB,UAAU,GAAGrB,OAAO,IAAIC,IAAI,IAAI,OAAOqB,EAAP,EAAWC,IAAX,KAAoB;AACxD,QAAMlB,IAAI,GAAGP,WAAW,CAAC,SAAD,EAAa,SAAQwB,EAAG,EAAxB,CAAxB;AACA,QAAMhB,IAAI,GAAG,MAAMN,OAAO,CAACwB,KAAR,CAAcnB,IAAd,EAAoBkB,IAApB,CAAnB;AAEA,SAAO5B,MAAM,CAACK,OAAD,CAAN,CAAgBM,IAAhB,EAAsB,EAAE,GAAGA,IAAL;AAAWL,IAAAA;AAAX,GAAtB,CAAP;AACD,CALD;;AAOA,MAAMwB,KAAK,GAAGzB,OAAO,IAAIC,IAAI,KAAK;AAChCW,EAAAA,OAAO,EAAEA,OAAO,CAACZ,OAAD,CAAP,CAAiBC,IAAjB,CADuB;AAEhCa,EAAAA,QAAQ,EAAEA,QAAQ,CAACd,OAAD,CAAR,CAAkBC,IAAlB,CAFsB;AAGhCF,EAAAA,KAAK,EAAEA,KAAK,CAACC,OAAD,CAAL,CAAeC,IAAf,CAHyB;AAIhCc,EAAAA,WAAW,EAAEA,WAAW,CAACf,OAAD,CAAX,CAAqBC,IAArB,CAJmB;AAKhCgB,EAAAA,OAAO,EAAEA,OAAO,CAACjB,OAAD,CAAP,CAAiBC,IAAjB,CALuB;AAMhCkB,EAAAA,MAAM,EAAEA,MAAM,CAACnB,OAAD,CAAN,CAAgBC,IAAhB;AANwB,CAAL,CAA7B;;AASAyB,MAAM,CAACC,OAAP,GAAiB3B,OAAO,IAAIyB,KAAK,CAACzB,OAAD,CAAjC","sourcesContent":["const { pather, fetchPage, single, collection } = require('./utils');\nconst formatters = require('./formatters');\n\nconst usersPather = pather('users');\n\nconst games = fetcher => user => async statuses => {\n  const filteredStatuses =\n    typeof statuses === 'string' ? statuses : statuses.join(',');\n  const path = usersPather(\n    user,\n    'games',\n    `?page=1&statuses=${filteredStatuses}`\n  );\n  const json = await fetcher.get(path);\n\n  const formatted = json.results.map(formatters.formatGame);\n  return collection(fetcher)(json, formatted, formatters.formatGame);\n};\n\nconst profile = fetcher => user => async () => {\n  const path = usersPather(user);\n  const json = await fetcher.get(path);\n\n  const formatted = formatters.formatProfile(json);\n  return single(fetcher)(json, formatted);\n};\n\nconst favorite = fetcher => user => async () => {\n  const path = usersPather(user, 'favorites');\n  const json = await fetcher.get(path);\n\n  const formatted = json.results.map(formatters.formatGame);\n  return collection(fetcher)(json, formatted, formatters.formatGame);\n};\n\nconst collections = fetcher => user => async () => {\n  const path = usersPather(user, 'collections');\n  const json = await fetcher.get(path);\n\n  const formatted = json.results.map(formatters.formatCollection);\n  return collection(fetcher)(json, formatted, formatters.formatCollection);\n};\n\nconst reviews = fetcher => user => async () => {\n  const path = usersPather(user, 'reviews');\n  const json = await fetcher.get(path);\n\n  const formatted = json.results.map(formatters.formatReviews);\n  return collection(fetcher)(json, formatted, formatters.formatReviews);\n};\n\nconst update = fetcher => user => () => ({\n  game: updateGame(fetcher)(user)\n});\n\nconst updateGame = fetcher => user => async (id, data) => {\n  const path = usersPather('current', `games/${id}`);\n  const json = await fetcher.patch(path, data);\n\n  return single(fetcher)(json, { ...json, user });\n};\n\nconst users = fetcher => user => ({\n  profile: profile(fetcher)(user),\n  favorite: favorite(fetcher)(user),\n  games: games(fetcher)(user),\n  collections: collections(fetcher)(user),\n  reviews: reviews(fetcher)(user),\n  update: update(fetcher)(user)\n});\n\nmodule.exports = fetcher => users(fetcher);\n"]},"metadata":{},"sourceType":"script"}