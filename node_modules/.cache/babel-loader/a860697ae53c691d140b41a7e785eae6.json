{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/Idan/Documents/GitHub/Idan91/BCKLG/bcklg/node_modules/@babel/runtime/regenerator\");\n\nrequire('./fetchLoader');\n\nvar Fetcher = require('./fetcher');\n\nvar users = require('./users');\n\nvar games = require('./games');\n\nvar _require = require('./utils'),\n    pather = _require.pather;\n\nmodule.exports = function _callee() {\n  var _ref,\n      _ref$timeout,\n      timeout,\n      email,\n      password,\n      cache,\n      token,\n      resp,\n      json,\n      fetcher,\n      purgeCache,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref$timeout = _ref.timeout, timeout = _ref$timeout === void 0 ? 60 : _ref$timeout, email = _ref.email, password = _ref.password;\n          cache = {};\n          token = ''; // log in if creds were provided\n\n          if (!(email && password)) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(fetch(pather('auth')('login'), {\n            headers: {\n              'Content-Type': 'application/json',\n              Accept: 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify({\n              email: email,\n              password: password\n            })\n          }));\n\n        case 6:\n          resp = _context.sent;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(resp.json());\n\n        case 9:\n          json = _context.sent;\n          token = json.key;\n\n        case 11:\n          // init fetcher\n          fetcher = Fetcher(cache, timeout * 1000, token); // init cache purger\n\n          purgeCache = function purgeCache(cache) {\n            return function () {\n              Object.entries(cache).forEach(function (i) {\n                return clearTimeout(i[1].timeout);\n              });\n              Object.keys(cache).forEach(function (k) {\n                return delete cache[k];\n              });\n            };\n          }; // init lib\n\n\n          return _context.abrupt(\"return\", {\n            fetcher: fetcher,\n            users: users(fetcher),\n            games: games(fetcher),\n            purgeCache: purgeCache(cache)\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/Idan/Documents/GitHub/Idan91/BCKLG/bcklg/node_modules/rawger/src/rawger.js"],"names":["require","Fetcher","users","games","pather","module","exports","timeout","email","password","cache","token","fetch","headers","Accept","method","body","JSON","stringify","resp","json","key","fetcher","purgeCache","Object","entries","forEach","i","clearTimeout","keys","k"],"mappings":";;AAAAA,OAAO,CAAC,eAAD,CAAP;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;eACmBA,OAAO,CAAC,SAAD,C;IAAlBI,M,YAAAA,M;;AAERC,MAAM,CAACC,OAAP,GAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yEAA2C,EAA3C,sBAASC,OAAT,EAASA,OAAT,6BAAmB,EAAnB,iBAAuBC,KAAvB,QAAuBA,KAAvB,EAA8BC,QAA9B,QAA8BA,QAA9B;AACXC,UAAAA,KADW,GACH,EADG;AAEXC,UAAAA,KAFW,GAEH,EAFG,EAIf;;AAJe,gBAKXH,KAAK,IAAIC,QALE;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAMMG,KAAK,CAACR,MAAM,CAAC,MAAD,CAAN,CAAe,OAAf,CAAD,EAA0B;AAChDS,YAAAA,OAAO,EAAE;AACP,8BAAgB,kBADT;AAEPC,cAAAA,MAAM,EAAE;AAFD,aADuC;AAKhDC,YAAAA,MAAM,EAAE,MALwC;AAMhDC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,cAAAA,KAAK,EAALA,KADmB;AAEnBC,cAAAA,QAAQ,EAARA;AAFmB,aAAf;AAN0C,WAA1B,CANX;;AAAA;AAMPU,UAAAA,IANO;AAAA;AAAA,2CAkBMA,IAAI,CAACC,IAAL,EAlBN;;AAAA;AAkBPA,UAAAA,IAlBO;AAmBbT,UAAAA,KAAK,GAAGS,IAAI,CAACC,GAAb;;AAnBa;AAsBf;AACMC,UAAAA,OAvBS,GAuBCrB,OAAO,CAACS,KAAD,EAAQH,OAAO,GAAG,IAAlB,EAAwBI,KAAxB,CAvBR,EAyBf;;AACMY,UAAAA,UA1BS,GA0BI,SAAbA,UAAa,CAAAb,KAAK;AAAA,mBAAI,YAAM;AAChCc,cAAAA,MAAM,CAACC,OAAP,CAAef,KAAf,EAAsBgB,OAAtB,CAA8B,UAAAC,CAAC;AAAA,uBAAIC,YAAY,CAACD,CAAC,CAAC,CAAD,CAAD,CAAKpB,OAAN,CAAhB;AAAA,eAA/B;AACAiB,cAAAA,MAAM,CAACK,IAAP,CAAYnB,KAAZ,EAAmBgB,OAAnB,CAA2B,UAAAI,CAAC;AAAA,uBAAI,OAAOpB,KAAK,CAACoB,CAAD,CAAhB;AAAA,eAA5B;AACD,aAHuB;AAAA,WA1BT,EA+Bf;;;AA/Be,2CAgCR;AACLR,YAAAA,OAAO,EAAPA,OADK;AAELpB,YAAAA,KAAK,EAAEA,KAAK,CAACoB,OAAD,CAFP;AAGLnB,YAAAA,KAAK,EAAEA,KAAK,CAACmB,OAAD,CAHP;AAILC,YAAAA,UAAU,EAAEA,UAAU,CAACb,KAAD;AAJjB,WAhCQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["require('./fetchLoader');\nconst Fetcher = require('./fetcher');\nconst users = require('./users');\nconst games = require('./games');\nconst { pather } = require('./utils');\n\nmodule.exports = async ({ timeout = 60, email, password } = {}) => {\n  let cache = {};\n  let token = '';\n\n  // log in if creds were provided\n  if (email && password) {\n    const resp = await fetch(pather('auth')('login'), {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n\n    const json = await resp.json();\n    token = json.key;\n  }\n\n  // init fetcher\n  const fetcher = Fetcher(cache, timeout * 1000, token);\n\n  // init cache purger\n  const purgeCache = cache => () => {\n    Object.entries(cache).forEach(i => clearTimeout(i[1].timeout));\n    Object.keys(cache).forEach(k => delete cache[k]);\n  };\n\n  // init lib\n  return {\n    fetcher,\n    users: users(fetcher),\n    games: games(fetcher),\n    purgeCache: purgeCache(cache)\n  };\n};\n"]},"metadata":{},"sourceType":"script"}