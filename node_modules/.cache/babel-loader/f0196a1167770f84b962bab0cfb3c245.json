{"ast":null,"code":"var _jsxFileName = \"/Users/Idan/Projects/Dev/GitHub/BCKLG/src/components/UI Elements/GameFocus.js\";\nimport React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport { getStatusTypes } from \"../../model/Status\";\n\nclass GameFocus extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedPlatform: \"\",\n      platformButtonClasses: \"btn-search link preset focus-button focus-platform\",\n      selectedStatus: \"\",\n      statusButtonClasses: \"btn-search link preset focus-button focus-status\",\n      selectedButtonClass: \"focus-button-selected\",\n      editGame: false\n    };\n\n    this.handleOptionChange = event => {\n      const {\n        target\n      } = event;\n      const type = target.getAttribute(\"type\");\n\n      if (type === \"Platform\") {\n        this.setState({\n          selectedPlatform: target.value\n        });\n      } else {\n        this.setState({\n          selectedStatus: target.value\n        });\n      }\n    };\n\n    this.toggleEditGame = () => {\n      this.setState({\n        selectedPlatform: this.props.game.platform.name,\n        selectedStatus: this.props.game.status,\n        editGame: true\n      });\n    };\n\n    this.renderPlatformButtons = () => {\n      let platformHeader;\n      let gamePlatforms;\n\n      if (this.props.currentPage === \"My Backlog\" && !this.state.editGame) {\n        platformHeader = React.createElement(\"h2\", {\n          className: \"focus-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, \"Platform:\");\n        gamePlatforms = React.createElement(\"button\", {\n          key: this.props.game.platform.slug,\n          value: this.props.game.platform.name,\n          className: `${this.state.platformButtonClasses} ${this.props.game.platform.slug}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, this.props.game.platform.name);\n      } else {\n        platformHeader = React.createElement(\"h2\", {\n          className: \"focus-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, \"Platforms:\");\n        let game;\n\n        if (this.props.currentPage === \"My Backlog\") {\n          game = this.props.game.raw;\n        } else {\n          game = this.props.game;\n        }\n\n        const platforms = game.platforms;\n\n        if (platforms !== undefined && platforms !== null && platforms.length > 0) {\n          gamePlatforms = platforms.map((platform, index) => {\n            const isSelected = this.state.selectedPlatform === platform.platform.name;\n            return React.createElement(\"button\", {\n              key: platform.platform.slug,\n              value: platform.platform.name,\n              type: \"Platform\",\n              selected: isSelected,\n              className: `${this.state.platformButtonClasses} ${platform.platform.slug} ${isSelected && this.state.selectedButtonClass}`,\n              onClick: this.handleOptionChange,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 82\n              },\n              __self: this\n            }, platform.platform.name);\n          });\n        }\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"focus-platform-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, platformHeader, gamePlatforms));\n    };\n\n    this.renderStatus = () => {\n      let statusTypes;\n      const releaseDate = new Date(this.props.game.released);\n      const today = new Date();\n\n      if (releaseDate.getTime() >= today.getTime() || this.props.game.released === null) {\n        statusTypes = [getStatusTypes()[0]];\n      } else {\n        statusTypes = getStatusTypes();\n      }\n\n      const statusHeader = React.createElement(\"h2\", {\n        className: \"focus-header focus-header-status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Status:\");\n      let statusToRender;\n\n      if (this.props.currentPage === \"Add Game\" || this.state.editGame) {\n        statusToRender = statusTypes.map((status, index) => {\n          const isSelected = this.state.selectedStatus === status;\n          return React.createElement(\"button\", {\n            key: index,\n            value: status,\n            selected: isSelected,\n            className: `${this.state.statusButtonClasses} ${isSelected && this.state.selectedButtonClass}`,\n            onClick: this.handleOptionChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }, status);\n        });\n      } else {\n        const status = this.props.game.status;\n        statusToRender = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          key: this.props.game.status,\n          value: status,\n          selected: false,\n          className: `${this.state.statusButtonClasses}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, status));\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"focus-status-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, statusHeader, statusToRender));\n    };\n\n    this.addGame = () => {\n      try {\n        if (this.validateSelections()) {\n          this.props.handleAddGame(this.props.game.slug, this.state.selectedPlatform, this.state.selectedStatus);\n          this.props.handleClose();\n        } else {\n          alert(\"Please select a platform and a status!\");\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.editGame = () => {\n      try {\n        if (this.validateSelections()) {\n          this.props.handleEditGame(this.props.game, this.state.selectedPlatform, this.state.selectedStatus);\n          this.props.handleClose();\n        } else {\n          alert(\"Please select a platform and a status!\");\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.deleteGame = () => {\n      if (window.confirm(\"Are you sure you want to delete this game from your backlog?\")) {\n        try {\n          this.props.handleDeleteGame(this.props.game);\n          this.props.handleClose();\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    };\n\n    this.renderBottomPortion = () => {\n      if (this.props.currentPage === \"Add Game\") {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-positive link\",\n          onClick: this.addGame,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, \"Add To Backlog\"));\n      } else if (this.state.editGame) {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-positive link\",\n          onClick: this.editGame,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, \"Save Edits\"), React.createElement(\"button\", {\n          className: \"btn link btn-close\",\n          onClick: this.deleteGame,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, \"Delete From Backlog\"));\n      } else {\n        return React.createElement(\"button\", {\n          className: \"btn link\",\n          onClick: this.toggleEditGame,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250\n          },\n          __self: this\n        }, \"Edit\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.currentPage === \"Add Game\") {\n      this.props.handleSearchVisibility();\n    }\n  }\n\n  validateSelections() {\n    return this.state.selectedPlatform !== \"\" && this.state.selectedStatus !== \"\";\n  }\n\n  render() {\n    const focusDetailsClasses = \"focus-details\";\n    console.log(this.props.game);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"focus-outer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn link btn-gray close-game-focus\",\n      onClick: this.props.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"fas fa-arrow-left fa-2x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"focus-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"focus-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: this.props.game.name,\n      game: this.props.game,\n      parentComponent: \"Game Focus\",\n      currentPage: this.props.currentPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: focusDetailsClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"platform-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, this.renderPlatformButtons()), this.renderStatus(), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"focus-bottom-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, this.renderBottomPortion())))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default GameFocus;","map":{"version":3,"sources":["/Users/Idan/Projects/Dev/GitHub/BCKLG/src/components/UI Elements/GameFocus.js"],"names":["React","Component","Card","getStatusTypes","GameFocus","state","selectedPlatform","platformButtonClasses","selectedStatus","statusButtonClasses","selectedButtonClass","editGame","handleOptionChange","event","target","type","getAttribute","setState","value","toggleEditGame","props","game","platform","name","status","renderPlatformButtons","platformHeader","gamePlatforms","currentPage","slug","raw","platforms","undefined","length","map","index","isSelected","renderStatus","statusTypes","releaseDate","Date","released","today","getTime","statusHeader","statusToRender","addGame","validateSelections","handleAddGame","handleClose","alert","err","console","log","handleEditGame","deleteGame","window","confirm","handleDeleteGame","renderBottomPortion","componentDidMount","handleSearchVisibility","render","focusDetailsClasses"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport { getStatusTypes } from \"../../model/Status\";\n\nclass GameFocus extends Component {\n  state = {\n    selectedPlatform: \"\",\n    platformButtonClasses: \"btn-search link preset focus-button focus-platform\",\n    selectedStatus: \"\",\n    statusButtonClasses: \"btn-search link preset focus-button focus-status\",\n    selectedButtonClass: \"focus-button-selected\",\n    editGame: false\n  };\n\n  componentDidMount() {\n    if (this.props.currentPage === \"Add Game\") {\n      this.props.handleSearchVisibility();\n    }\n  }\n\n  handleOptionChange = event => {\n    const { target } = event;\n    const type = target.getAttribute(\"type\");\n\n    if (type === \"Platform\") {\n      this.setState({\n        selectedPlatform: target.value\n      });\n    } else {\n      this.setState({\n        selectedStatus: target.value\n      });\n    }\n  };\n\n  toggleEditGame = () => {\n    this.setState({\n      selectedPlatform: this.props.game.platform.name,\n      selectedStatus: this.props.game.status,\n      editGame: true\n    });\n  };\n\n  renderPlatformButtons = () => {\n    let platformHeader;\n    let gamePlatforms;\n\n    if (this.props.currentPage === \"My Backlog\" && !this.state.editGame) {\n      platformHeader = <h2 className=\"focus-header\">Platform:</h2>;\n\n      gamePlatforms = (\n        <button\n          key={this.props.game.platform.slug}\n          value={this.props.game.platform.name}\n          className={`${this.state.platformButtonClasses} ${this.props.game.platform.slug}`}\n        >\n          {this.props.game.platform.name}\n        </button>\n      );\n    } else {\n      platformHeader = <h2 className=\"focus-header\">Platforms:</h2>;\n      let game;\n\n      if (this.props.currentPage === \"My Backlog\") {\n        game = this.props.game.raw;\n      } else {\n        game = this.props.game;\n      }\n\n      const platforms = game.platforms;\n\n      if (\n        platforms !== undefined &&\n        platforms !== null &&\n        platforms.length > 0\n      ) {\n        gamePlatforms = platforms.map((platform, index) => {\n          const isSelected =\n            this.state.selectedPlatform === platform.platform.name;\n\n          return (\n            <button\n              key={platform.platform.slug}\n              value={platform.platform.name}\n              type=\"Platform\"\n              selected={isSelected}\n              className={`${this.state.platformButtonClasses} ${\n                platform.platform.slug\n              } ${isSelected && this.state.selectedButtonClass}`}\n              onClick={this.handleOptionChange}\n            >\n              {platform.platform.name}\n            </button>\n          );\n        });\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"focus-platform-container\">\n          {platformHeader}\n          {gamePlatforms}\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  renderStatus = () => {\n    let statusTypes;\n\n    const releaseDate = new Date(this.props.game.released);\n    const today = new Date();\n\n    if (\n      releaseDate.getTime() >= today.getTime() ||\n      this.props.game.released === null\n    ) {\n      statusTypes = [getStatusTypes()[0]];\n    } else {\n      statusTypes = getStatusTypes();\n    }\n\n    const statusHeader = (\n      <h2 className=\"focus-header focus-header-status\">Status:</h2>\n    );\n    let statusToRender;\n\n    if (this.props.currentPage === \"Add Game\" || this.state.editGame) {\n      statusToRender = statusTypes.map((status, index) => {\n        const isSelected = this.state.selectedStatus === status;\n\n        return (\n          <button\n            key={index}\n            value={status}\n            selected={isSelected}\n            className={`${this.state.statusButtonClasses} ${isSelected &&\n              this.state.selectedButtonClass}`}\n            onClick={this.handleOptionChange}\n          >\n            {status}\n          </button>\n        );\n      });\n    } else {\n      const status = this.props.game.status;\n\n      statusToRender = (\n        <React.Fragment>\n          <button\n            key={this.props.game.status}\n            value={status}\n            selected={false}\n            className={`${this.state.statusButtonClasses}`}\n          >\n            {status}\n          </button>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"focus-status-container\">\n          {statusHeader}\n          {statusToRender}\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  addGame = () => {\n    try {\n      if (this.validateSelections()) {\n        this.props.handleAddGame(\n          this.props.game.slug,\n          this.state.selectedPlatform,\n          this.state.selectedStatus\n        );\n        this.props.handleClose();\n      } else {\n        alert(\"Please select a platform and a status!\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  editGame = () => {\n    try {\n      if (this.validateSelections()) {\n        this.props.handleEditGame(\n          this.props.game,\n          this.state.selectedPlatform,\n          this.state.selectedStatus\n        );\n        this.props.handleClose();\n      } else {\n        alert(\"Please select a platform and a status!\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  deleteGame = () => {\n    if (\n      window.confirm(\n        \"Are you sure you want to delete this game from your backlog?\"\n      )\n    ) {\n      try {\n        this.props.handleDeleteGame(this.props.game);\n        this.props.handleClose();\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n\n  validateSelections() {\n    return (\n      this.state.selectedPlatform !== \"\" && this.state.selectedStatus !== \"\"\n    );\n  }\n\n  renderBottomPortion = () => {\n    if (this.props.currentPage === \"Add Game\") {\n      return (\n        <React.Fragment>\n          <button className=\"btn btn-positive link\" onClick={this.addGame}>\n            Add To Backlog\n          </button>\n        </React.Fragment>\n      );\n    } else if (this.state.editGame) {\n      return (\n        <React.Fragment>\n          <button className=\"btn btn-positive link\" onClick={this.editGame}>\n            Save Edits\n          </button>\n          <button className=\"btn link btn-close\" onClick={this.deleteGame}>\n            Delete From Backlog\n          </button>\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <button className=\"btn link\" onClick={this.toggleEditGame}>\n          Edit\n        </button>\n      );\n    }\n  };\n\n  render() {\n    const focusDetailsClasses = \"focus-details\";\n\n    console.log(this.props.game);\n\n    return (\n      <React.Fragment>\n        <div className=\"focus-outer-container\">\n          <button\n            className=\"btn link btn-gray close-game-focus\"\n            onClick={this.props.handleClose}\n          >\n            <i class=\"fas fa-arrow-left fa-2x\"></i>\n          </button>\n          <div className=\"focus-container\">\n            <div className=\"focus-box\">\n              <div className=\"card-container\">\n                <Card\n                  key={this.props.game.name}\n                  game={this.props.game}\n                  parentComponent={\"Game Focus\"}\n                  currentPage={this.props.currentPage}\n                />\n              </div>\n              <div className={focusDetailsClasses}>\n                <div className=\"platform-container\">\n                  {this.renderPlatformButtons()}\n                </div>\n                {this.renderStatus()}\n                <br />\n                <div className=\"focus-bottom-buttons\">\n                  {this.renderBottomPortion()}\n                </div>\n              </div>\n            </div>\n          </div>\n          <br />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default GameFocus;\n"]},"metadata":{},"sourceType":"module"}