{"ast":null,"code":"var _jsxFileName = \"/Users/Idan/Documents/GitHub/Idan91/BCKLG/bcklg/src/App.js\";\nimport React, { Component, useLayoutEffect } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\nimport Game from \"./Game\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      navItems: [\"My Backlog\", \"Settings\", \"Account\"],\n      isLoaded: false,\n      games: [],\n      rawger: \"\",\n      pageIndex: 0,\n      navbarClasses: [],\n      username: \"idan91\",\n      myPlatforms: []\n    };\n\n    this.gameExists = (i_Game, i_GameList) => {\n      let exists = false;\n      i_GameList.forEach(game => {\n        if (game.slug == i_Game) {\n          exists = true;\n        }\n      });\n      return exists;\n    };\n\n    this.editGame = (i_Game, i_Platform, i_Status) => {\n      const gamesArr = this.state.games;\n      const newGame = new Game(i_Game.raw, i_Platform, i_Status);\n      const newGameArr = gamesArr.map(game => {\n        if (game.name === i_Game.raw.name) {\n          return newGame;\n        } else {\n          return game;\n        }\n      });\n      this.setState({\n        games: newGameArr\n      });\n    };\n\n    this.addGameToList = async (i_Game, i_Platform = \"PlayStation 4\", i_Status = \"Owned\") => {\n      const myGameList = this.state.games;\n      const gameExists = this.gameExists(i_Game, myGameList);\n\n      if (gameExists) {\n        console.log(\"Game already exits!\");\n      } else {\n        let game = await this.getGameFromApi(i_Game).then(data => {\n          return data;\n        }).then(resolvedGame => {\n          const convertedGame = this.convertToGameObject(resolvedGame, i_Platform, i_Status);\n          return convertedGame;\n        }).catch(e => {\n          console.log(e);\n        });\n        myGameList.push(game);\n        this.setState({\n          games: myGameList\n        });\n      }\n    };\n\n    this.startRawger = async () => {\n      const Rawger = require(\"rawger\");\n\n      await Rawger({}).then(data => {\n        this.setState({\n          rawger: data\n        });\n      });\n    };\n\n    this.getGameFromApi = async i_GameSlug => {\n      const Rawger = require(\"rawger\");\n\n      const _ref = await Rawger({}),\n            games = _ref.games;\n\n      const results = await games.get(i_GameSlug).then(result => {\n        return result.get();\n      }).then(data => {\n        return data.raw;\n      });\n      return results;\n    };\n\n    this.getGameFromList = i_Game => {\n      const gameList = this.state.games;\n      let myGame;\n      gameList.forEach(game => {\n        if (i_Game === game.slug) {\n          myGame = game;\n        }\n      });\n      return myGame;\n    };\n\n    this.searchGame = async i_GameName => {\n      const Rawger = require(\"rawger\");\n\n      const _ref2 = await Rawger({}),\n            games = _ref2.games;\n\n      try {\n        const results = await games.search(i_GameName).then(result => {\n          return result.raw();\n        }).then(data => {\n          return data;\n        });\n        const filteredResults = results.filter(item => item.rating > 0);\n        return filteredResults;\n      } catch (error) {\n        return error.toString();\n      }\n    };\n\n    this.switchPage = event => {\n      const navItem = event.target.getAttribute(\"value\");\n      this.state.navItems.forEach((item, index) => {\n        if (item === navItem) {\n          this.setState({\n            pageIndex: index\n          });\n          this.defineNavbarClasses(index);\n        }\n      });\n    };\n\n    this.defineNavbarClasses = i_Index => {\n      const navItems = this.state.navItems;\n      let navClasses = [];\n      const defaultClasses = \"nav-link link\";\n\n      for (let i = 0; i < navItems.length; i++) {\n        if (i === i_Index) {\n          navClasses.push(`${defaultClasses} btn nav-selected`);\n        } else {\n          navClasses.push(`${defaultClasses}`);\n        }\n      }\n\n      this.setState({\n        navbarClasses: navClasses\n      });\n    };\n  }\n\n  componentDidMount() {\n    // fetch(\n    //   \"https://api.rawg.io/api/games?dates=2019-01-01,2019-12-31&ordering=-added\"\n    // )\n    //   .then(result => {\n    //     return result.json();\n    //   })\n    //   .then(data => {\n    //     this.setState({\n    //       isLoaded: true,\n    //       games: data.results\n    //     });\n    //   });\n    this.startRawger();\n    this.defineNavbarClasses(this.state.pageIndex);\n  }\n\n  convertToGameObject(i_Game, i_Platform, i_Status = 0) {\n    return new Game(i_Game, i_Platform, i_Status);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      navItems: this.state.navItems,\n      pageName: this.state.navItems[this.state.pageIndex],\n      pageIndex: this.state.pageIndex,\n      handleClick: this.switchPage,\n      classes: this.state.navbarClasses,\n      username: this.state.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"inner-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(Content, {\n      pageName: this.state.navItems[this.state.pageIndex],\n      pageIndex: this.state.pageIndex,\n      games: this.state.games,\n      handleSearch: this.searchGame,\n      handleAddGame: this.addGameToList,\n      handleEditGame: this.editGame,\n      handleGetGameFromApi: this.getGameFromApi,\n      handleGetGameFromList: this.getGameFromList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Idan/Documents/GitHub/Idan91/BCKLG/bcklg/src/App.js"],"names":["React","Component","useLayoutEffect","Navbar","Content","Footer","Game","App","state","navItems","isLoaded","games","rawger","pageIndex","navbarClasses","username","myPlatforms","gameExists","i_Game","i_GameList","exists","forEach","game","slug","editGame","i_Platform","i_Status","gamesArr","newGame","raw","newGameArr","map","name","setState","addGameToList","myGameList","console","log","getGameFromApi","then","data","resolvedGame","convertedGame","convertToGameObject","catch","e","push","startRawger","Rawger","require","i_GameSlug","results","get","result","getGameFromList","gameList","myGame","searchGame","i_GameName","search","filteredResults","filter","item","rating","error","toString","switchPage","event","navItem","target","getAttribute","index","defineNavbarClasses","i_Index","navClasses","defaultClasses","i","length","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component, useLayoutEffect } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\nimport Game from \"./Game\";\n\nclass App extends Component {\n  state = {\n    navItems: [\"My Backlog\", \"Settings\", \"Account\"],\n    isLoaded: false,\n    games: [],\n    rawger: \"\",\n    pageIndex: 0,\n    navbarClasses: [],\n    username: \"idan91\",\n    myPlatforms: []\n  };\n\n  gameExists = (i_Game, i_GameList) => {\n    let exists = false;\n\n    i_GameList.forEach(game => {\n      if (game.slug == i_Game) {\n        exists = true;\n      }\n    });\n\n    return exists;\n  };\n\n  editGame = (i_Game, i_Platform, i_Status) => {\n    const gamesArr = this.state.games;\n    const newGame = new Game(i_Game.raw, i_Platform, i_Status);\n\n    const newGameArr = gamesArr.map(game => {\n      if (game.name === i_Game.raw.name) {\n        return newGame;\n      } else {\n        return game;\n      }\n    });\n\n    this.setState({\n      games: newGameArr\n    });\n  };\n\n  addGameToList = async (\n    i_Game,\n    i_Platform = \"PlayStation 4\",\n    i_Status = \"Owned\"\n  ) => {\n    const myGameList = this.state.games;\n\n    const gameExists = this.gameExists(i_Game, myGameList);\n\n    if (gameExists) {\n      console.log(\"Game already exits!\");\n    } else {\n      let game = await this.getGameFromApi(i_Game)\n        .then(data => {\n          return data;\n        })\n        .then(resolvedGame => {\n          const convertedGame = this.convertToGameObject(\n            resolvedGame,\n            i_Platform,\n            i_Status\n          );\n\n          return convertedGame;\n        })\n        .catch(e => {\n          console.log(e);\n        });\n\n      myGameList.push(game);\n\n      this.setState({\n        games: myGameList\n      });\n    }\n  };\n\n  componentDidMount() {\n    // fetch(\n    //   \"https://api.rawg.io/api/games?dates=2019-01-01,2019-12-31&ordering=-added\"\n    // )\n    //   .then(result => {\n    //     return result.json();\n    //   })\n    //   .then(data => {\n    //     this.setState({\n    //       isLoaded: true,\n    //       games: data.results\n    //     });\n    //   });\n\n    this.startRawger();\n\n    this.defineNavbarClasses(this.state.pageIndex);\n  }\n\n  startRawger = async () => {\n    const Rawger = require(\"rawger\");\n    await Rawger({}).then(data => {\n      this.setState({\n        rawger: data\n      });\n    });\n  };\n\n  getGameFromApi = async i_GameSlug => {\n    const Rawger = require(\"rawger\");\n    const { games } = await Rawger({});\n    const results = await games\n      .get(i_GameSlug)\n      .then(result => {\n        return result.get();\n      })\n      .then(data => {\n        return data.raw;\n      });\n\n    return results;\n  };\n\n  getGameFromList = i_Game => {\n    const gameList = this.state.games;\n    let myGame;\n\n    gameList.forEach(game => {\n      if (i_Game === game.slug) {\n        myGame = game;\n      }\n    });\n\n    return myGame;\n  };\n\n  searchGame = async i_GameName => {\n    const Rawger = require(\"rawger\");\n    const { games } = await Rawger({});\n    try {\n      const results = await games\n        .search(i_GameName)\n        .then(result => {\n          return result.raw();\n        })\n        .then(data => {\n          return data;\n        });\n\n      const filteredResults = results.filter(item => item.rating > 0);\n\n      return filteredResults;\n    } catch (error) {\n      return error.toString();\n    }\n  };\n\n  convertToGameObject(i_Game, i_Platform, i_Status = 0) {\n    return new Game(i_Game, i_Platform, i_Status);\n  }\n\n  switchPage = event => {\n    const navItem = event.target.getAttribute(\"value\");\n\n    this.state.navItems.forEach((item, index) => {\n      if (item === navItem) {\n        this.setState({ pageIndex: index });\n        this.defineNavbarClasses(index);\n      }\n    });\n  };\n\n  defineNavbarClasses = i_Index => {\n    const navItems = this.state.navItems;\n    let navClasses = [];\n\n    const defaultClasses = \"nav-link link\";\n\n    for (let i = 0; i < navItems.length; i++) {\n      if (i === i_Index) {\n        navClasses.push(`${defaultClasses} btn nav-selected`);\n      } else {\n        navClasses.push(`${defaultClasses}`);\n      }\n    }\n    this.setState({\n      navbarClasses: navClasses\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar\n          navItems={this.state.navItems}\n          pageName={this.state.navItems[this.state.pageIndex]}\n          pageIndex={this.state.pageIndex}\n          handleClick={this.switchPage}\n          classes={this.state.navbarClasses}\n          username={this.state.username}\n        />\n        <div className=\"inner-body\">\n          <Content\n            pageName={this.state.navItems[this.state.pageIndex]}\n            pageIndex={this.state.pageIndex}\n            games={this.state.games}\n            handleSearch={this.searchGame}\n            handleAddGame={this.addGameToList}\n            handleEditGame={this.editGame}\n            handleGetGameFromApi={this.getGameFromApi}\n            handleGetGameFromList={this.getGameFromList}\n          />\n        </div>\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}