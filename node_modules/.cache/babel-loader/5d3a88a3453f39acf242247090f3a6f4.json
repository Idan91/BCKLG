{"ast":null,"code":"var _jsxFileName = \"/Users/Idan/Documents/GitHub/Idan91/BCKLG/bcklg/src/components/GameFocus.js\";\nimport React, { Component } from \"react\";\nimport Card from \"./Card\";\n\nclass GameFocus extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedPlatform: \"\",\n      platformButtonClasses: \"btn-search link preset focus-button focus-platform\",\n      selectedStatus: \"\",\n      statusButtonClasses: \"btn-search link preset focus-button focus-status\",\n      selectedButtonClass: \"focus-button-selected\",\n      editGame: false\n    };\n\n    this.handleOptionChange = event => {\n      const target = event.target;\n      const type = target.getAttribute(\"type\");\n\n      if (type === \"Platform\") {\n        this.setState({\n          selectedPlatform: target.value\n        });\n      } else {\n        this.setState({\n          selectedStatus: target.value\n        });\n      }\n    };\n\n    this.toggleEditGame = () => {\n      this.setState({\n        editGame: true\n      });\n    };\n\n    this.renderPlatformButtons = () => {\n      let platformHeader;\n      let gamePlatforms;\n\n      if (this.props.currentPage === \"My Backlog\" && !this.state.editGame) {\n        platformHeader = React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \"Platform:\");\n        gamePlatforms = React.createElement(\"button\", {\n          key: this.props.game.platform.slug,\n          value: this.props.game.platform.name,\n          className: `${this.state.platformButtonClasses} ${this.props.game.platform.slug}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, this.props.game.platform.name);\n      } else {\n        platformHeader = React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, \"Platforms:\");\n        let game;\n\n        if (this.props.currentPage === \"My Backlog\") {\n          game = this.props.game.raw;\n        } else {\n          game = this.props.game;\n        }\n\n        const platforms = game.platforms;\n\n        if (platforms !== undefined && platforms !== null && platforms.length > 0) {\n          gamePlatforms = platforms.map((platform, index) => {\n            const isSelected = this.state.selectedPlatform === platform.platform.name;\n            return React.createElement(\"button\", {\n              key: platform.platform.slug,\n              value: platform.platform.name,\n              type: \"Platform\",\n              selected: isSelected,\n              className: `${this.state.platformButtonClasses} ${platform.platform.slug} ${isSelected && this.state.selectedButtonClass}`,\n              onClick: this.handleOptionChange,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 73\n              },\n              __self: this\n            }, platform.platform.name);\n          });\n        }\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, platformHeader, gamePlatforms); // return <h2>test</h2>;\n    };\n\n    this.addGame = () => {\n      try {\n        this.props.handleAddGame(this.props.game.slug, this.state.selectedPlatform, this.state.selectedStatus);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.props.handleClose();\n      }\n    };\n\n    this.editGame = () => {\n      try {\n        this.props.handleEditGame(this.props.game.slug, this.state.selectedPlatform, this.state.selectedStatus);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.props.handleClose();\n      }\n    };\n\n    this.renderStatus = () => {\n      const statusTypes = [\"Owned\", \"Started\", \"Beaten\", \"Dropped\"];\n      const statusHeader = React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Status:\");\n      let statusToRender;\n\n      if (this.props.currentPage === \"Add Item\" || this.state.editGame) {\n        statusToRender = statusTypes.map((status, index) => {\n          const isSelected = this.state.selectedStatus === status;\n          return React.createElement(\"button\", {\n            key: index,\n            value: status,\n            selected: isSelected,\n            className: `${this.state.statusButtonClasses} ${isSelected && this.state.selectedButtonClass}`,\n            onClick: this.handleOptionChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, status);\n        });\n      } else {\n        const status = this.props.game.status;\n        statusToRender = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          key: this.props.game.status,\n          value: status,\n          selected: false,\n          className: `${this.state.statusButtonClasses}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, status));\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, statusHeader, statusToRender);\n    };\n\n    this.renderBottomPortion = () => {\n      if (this.props.currentPage == \"Add Item\") {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-add-to-backlog link\",\n          onClick: this.addGame,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, \"Add To Backlog\"));\n      } else if (this.state.editGame) {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn btn-save-edits link\",\n          onClick: this.editGame,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        }, \"Save Edits\"));\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn link\",\n      onClick: this.props.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Close\"), (() => {\n      if (this.props.currentPage === \"My Backlog\") {\n        return React.createElement(\"button\", {\n          className: \"btn link\",\n          onClick: this.toggleEditGame,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, \"Edit\");\n      }\n    })(), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"focus-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-container-focus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: this.props.game.name,\n      game: this.props.game,\n      parentComponent: \"Game Focus\",\n      currentPage: this.props.currentPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"focus-details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-properties\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, this.renderPlatformButtons(), this.renderStatus(), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), this.renderBottomPortion())))));\n  }\n\n}\n\nexport default GameFocus;","map":{"version":3,"sources":["/Users/Idan/Documents/GitHub/Idan91/BCKLG/bcklg/src/components/GameFocus.js"],"names":["React","Component","Card","GameFocus","state","selectedPlatform","platformButtonClasses","selectedStatus","statusButtonClasses","selectedButtonClass","editGame","handleOptionChange","event","target","type","getAttribute","setState","value","toggleEditGame","renderPlatformButtons","platformHeader","gamePlatforms","props","currentPage","game","platform","slug","name","raw","platforms","undefined","length","map","index","isSelected","addGame","handleAddGame","error","console","log","handleClose","handleEditGame","renderStatus","statusTypes","statusHeader","statusToRender","status","renderBottomPortion","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"./Card\";\n\nclass GameFocus extends Component {\n  state = {\n    selectedPlatform: \"\",\n    platformButtonClasses: \"btn-search link preset focus-button focus-platform\",\n    selectedStatus: \"\",\n    statusButtonClasses: \"btn-search link preset focus-button focus-status\",\n    selectedButtonClass: \"focus-button-selected\",\n    editGame: false\n  };\n\n  handleOptionChange = event => {\n    const { target } = event;\n    const type = target.getAttribute(\"type\");\n\n    if (type === \"Platform\") {\n      this.setState({\n        selectedPlatform: target.value\n      });\n    } else {\n      this.setState({\n        selectedStatus: target.value\n      });\n    }\n  };\n\n  toggleEditGame = () => {\n    this.setState({\n      editGame: true\n    });\n  };\n\n  renderPlatformButtons = () => {\n    let platformHeader;\n    let gamePlatforms;\n\n    if (this.props.currentPage === \"My Backlog\" && !this.state.editGame) {\n      platformHeader = <h2>Platform:</h2>;\n\n      gamePlatforms = (\n        <button\n          key={this.props.game.platform.slug}\n          value={this.props.game.platform.name}\n          className={`${this.state.platformButtonClasses} ${this.props.game.platform.slug}`}\n        >\n          {this.props.game.platform.name}\n        </button>\n      );\n    } else {\n      platformHeader = <h2>Platforms:</h2>;\n      let game;\n\n      if (this.props.currentPage === \"My Backlog\") {\n        game = this.props.game.raw;\n      } else {\n        game = this.props.game;\n      }\n\n      const platforms = game.platforms;\n\n      if (\n        platforms !== undefined &&\n        platforms !== null &&\n        platforms.length > 0\n      ) {\n        gamePlatforms = platforms.map((platform, index) => {\n          const isSelected =\n            this.state.selectedPlatform === platform.platform.name;\n\n          return (\n            <button\n              key={platform.platform.slug}\n              value={platform.platform.name}\n              type=\"Platform\"\n              selected={isSelected}\n              className={`${this.state.platformButtonClasses} ${\n                platform.platform.slug\n              } ${isSelected && this.state.selectedButtonClass}`}\n              onClick={this.handleOptionChange}\n            >\n              {platform.platform.name}\n            </button>\n          );\n        });\n      }\n    }\n\n    return (\n      <React.Fragment>\n        {platformHeader}\n        {gamePlatforms}\n      </React.Fragment>\n    );\n    // return <h2>test</h2>;\n  };\n\n  addGame = () => {\n    try {\n      this.props.handleAddGame(\n        this.props.game.slug,\n        this.state.selectedPlatform,\n        this.state.selectedStatus\n      );\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.props.handleClose();\n    }\n  };\n\n  editGame = () => {\n    try {\n      this.props.handleEditGame(\n        this.props.game.slug,\n        this.state.selectedPlatform,\n        this.state.selectedStatus\n      );\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.props.handleClose();\n    }\n  };\n\n  renderStatus = () => {\n    const statusTypes = [\"Owned\", \"Started\", \"Beaten\", \"Dropped\"];\n    const statusHeader = <h2>Status:</h2>;\n    let statusToRender;\n\n    if (this.props.currentPage === \"Add Item\" || this.state.editGame) {\n      statusToRender = statusTypes.map((status, index) => {\n        const isSelected = this.state.selectedStatus === status;\n\n        return (\n          <button\n            key={index}\n            value={status}\n            selected={isSelected}\n            className={`${this.state.statusButtonClasses} ${isSelected &&\n              this.state.selectedButtonClass}`}\n            onClick={this.handleOptionChange}\n          >\n            {status}\n          </button>\n        );\n      });\n    } else {\n      const status = this.props.game.status;\n\n      statusToRender = (\n        <React.Fragment>\n          <button\n            key={this.props.game.status}\n            value={status}\n            selected={false}\n            className={`${this.state.statusButtonClasses}`}\n          >\n            {status}\n          </button>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        {statusHeader}\n        {statusToRender}\n      </React.Fragment>\n    );\n  };\n\n  renderBottomPortion = () => {\n    if (this.props.currentPage == \"Add Item\") {\n      return (\n        <React.Fragment>\n          <button\n            className=\"btn btn-add-to-backlog link\"\n            onClick={this.addGame}\n          >\n            Add To Backlog\n          </button>\n        </React.Fragment>\n      );\n    } else if (this.state.editGame) {\n      return (\n        <React.Fragment>\n          <button className=\"btn btn-save-edits link\" onClick={this.editGame}>\n            Save Edits\n          </button>\n        </React.Fragment>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <br />\n        <button className=\"btn link\" onClick={this.props.handleClose}>\n          Close\n        </button>\n        {(() => {\n          if (this.props.currentPage === \"My Backlog\") {\n            return (\n              <button className=\"btn link\" onClick={this.toggleEditGame}>\n                Edit\n              </button>\n            );\n          }\n        })()}\n        <br />\n        <br />\n        <div className=\"focus-container\">\n          <div className=\"card-container-focus\">\n            <Card\n              key={this.props.game.name}\n              game={this.props.game}\n              parentComponent={\"Game Focus\"}\n              currentPage={this.props.currentPage}\n            />\n            <div className=\"focus-details\">\n              <div className=\"game-properties\">\n                {this.renderPlatformButtons()}\n                {this.renderStatus()}\n                <br />\n                <br />\n                {this.renderBottomPortion()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default GameFocus;\n"]},"metadata":{},"sourceType":"module"}