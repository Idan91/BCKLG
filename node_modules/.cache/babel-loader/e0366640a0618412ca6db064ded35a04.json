{"ast":null,"code":"var _jsxFileName = \"/Users/Idan/Documents/GitHub/Idan91/BCKLG/bcklg/src/components/BCKLG Pages/MyBacklog.js\";\nimport React, { Component } from \"react\";\nimport Cards from \"../UI Elements/Cards\";\nimport { getStatusTypes } from \"../../model/Status\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\"; // Redux\n\nimport { connect } from \"react-redux\";\n\nclass MyBacklog extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      addGameVisible: false,\n      statusTypes: [],\n      filterButtonVisible: true,\n      filterVisible: false,\n      filterIndex: 0\n    };\n\n    this.toggleAddItem = () => {\n      if (this.state.addGameVisible) {\n        this.setState({\n          addItemVisible: false,\n          addItemClasses: \"btn btn-add-item link\"\n        });\n      } else {\n        this.setState({\n          addItemVisible: true,\n          addItemClasses: \"btn btn-add-item btn-selected link\"\n        });\n      }\n    };\n\n    this.hideAddItem = () => {\n      this.setState({\n        addItemVisible: false,\n        addItemClasses: \"btn link\"\n      });\n    };\n\n    this.displayAddGame = () => {\n      this.props.history.push(\"/add-game\");\n    };\n\n    this.filterBacklogGames = i_Games => {\n      let filteredGames;\n      const filterIndex = this.state.filterIndex;\n\n      if (filterIndex != 0) {\n        const statusType = this.state.statusTypes[filterIndex];\n        filteredGames = i_Games.filter(game => {\n          if (game.status === statusType) {\n            return game;\n          }\n        });\n      } else {\n        filteredGames = i_Games;\n      }\n\n      return filteredGames;\n    };\n\n    this.renderStatBar = i_Games => {\n      const statusTypes = this.state.statusTypes;\n      const gameStatusCount = statusTypes.map(status => {\n        let count = 0;\n        let gameStatus = {};\n        i_Games.forEach(game => {\n          if (game.status === status) {\n            count++;\n          }\n        });\n        gameStatus.status = status;\n        gameStatus.count = count;\n        return gameStatus;\n      });\n      const statusStats = gameStatusCount.map((gameStatus, index) => {\n        if (index > 0) {\n          return React.createElement(React.Fragment, {\n            key: gameStatus.status,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90\n            },\n            __self: this\n          }, React.createElement(\"p\", {\n            className: \"stat\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          }, `${gameStatus.status}: ${gameStatus.count}`), index !== gameStatusCount.length - 1 && React.createElement(\"p\", {\n            className: \"stat stat-separator\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, \"|\"));\n        }\n      });\n      return React.createElement(\"div\", {\n        className: \"stat-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"stat-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"stat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"# of Games: \", i_Games.length), React.createElement(\"p\", {\n        className: \"stat stat-separator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"|\"), statusStats));\n    };\n\n    this.renderStatusFilters = () => {\n      let statusTypes = this.state.statusTypes;\n      const filterIndex = this.state.filterIndex;\n      let statusToRender;\n      const statusButtonClasses = \"btn btn-status-filter link\";\n      const selectedButtonClass = \"btn-selected-outline\";\n      statusToRender = statusTypes.map((status, index) => {\n        const isSelected = index == filterIndex;\n        return React.createElement(\"button\", {\n          key: index,\n          value: status,\n          \"value-index\": index,\n          selected: isSelected,\n          className: `${statusButtonClasses} ${isSelected && selectedButtonClass}`,\n          onClick: this.handleFilterSelect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, status);\n      });\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, statusToRender);\n    };\n\n    this.handleFilterSelect = event => {\n      const target = event.target;\n      const filterIndex = target.getAttribute(\"value-index\");\n      this.setState({\n        filterIndex\n      });\n    };\n\n    this.handleFilterGames = () => {\n      this.setState({\n        filterVisible: !this.state.filterVisible\n      });\n    };\n\n    this.toggleFilter = i_ActionType => {\n      if (i_ActionType === \"hide\") {\n        this.setState({\n          filterButtonVisible: false,\n          filterVisible: false\n        });\n      } else if (i_ActionType === \"show\") {\n        this.setState({\n          filterButtonVisible: true\n        });\n      }\n    };\n\n    this.renderCards = i_Games => {\n      return React.createElement(\"div\", {\n        className: \"content card-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(Cards, {\n        games: this.filterBacklogGames(i_Games),\n        parentComponent: \"My Backlog\",\n        currentPage: \"My Backlog\",\n        handleToggleFilter: this.toggleFilter,\n        handleEditGame: this.props.handleEditGame,\n        handleDeleteGame: this.props.handleDeleteGame,\n        handleGetGameFromApi: this.props.handleGetGameFromApi,\n        handleGetGameFromList: this.props.handleGetGameFromList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }));\n    };\n\n    this.renderContent = i_Games => {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"page-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, this.props.pageName), React.createElement(\"div\", {\n        className: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"option-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"option-bar-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/add-game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-add-game link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"+ Add Game\"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      })), this.renderStatBar(i_Games), React.createElement(\"div\", {\n        className: \"center-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, this.state.filterButtonVisible && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn btn-filter link\",\n        onClick: this.handleFilterGames,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Filter\"), !this.state.filterVisible && this.state.filterIndex > 0 && React.createElement(\"div\", {\n        className: \"status-filter-container \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, `Status: ${this.state.statusTypes[this.state.filterIndex]}`)), this.state.filterVisible && this.renderStatusFilters()), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, this.renderCards(i_Games))));\n    };\n  }\n\n  componentDidMount() {\n    const statusTypes = getStatusTypes();\n    statusTypes.unshift(\"All\");\n    this.setState({\n      statusTypes\n    });\n  }\n\n  render() {\n    let myGames = this.props.games;\n\n    if (myGames === undefined) {\n      myGames = [];\n    }\n\n    return this.renderContent(myGames);\n  }\n\n}\n\nMyBacklog.propTypes = {\n  user: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps)(MyBacklog);","map":{"version":3,"sources":["/Users/Idan/Documents/GitHub/Idan91/BCKLG/bcklg/src/components/BCKLG Pages/MyBacklog.js"],"names":["React","Component","Cards","getStatusTypes","Link","PropTypes","connect","MyBacklog","state","addGameVisible","statusTypes","filterButtonVisible","filterVisible","filterIndex","toggleAddItem","setState","addItemVisible","addItemClasses","hideAddItem","displayAddGame","props","history","push","filterBacklogGames","i_Games","filteredGames","statusType","filter","game","status","renderStatBar","gameStatusCount","map","count","gameStatus","forEach","statusStats","index","length","renderStatusFilters","statusToRender","statusButtonClasses","selectedButtonClass","isSelected","handleFilterSelect","event","target","getAttribute","handleFilterGames","toggleFilter","i_ActionType","renderCards","handleEditGame","handleDeleteGame","handleGetGameFromApi","handleGetGameFromList","renderContent","pageName","componentDidMount","unshift","render","myGames","games","undefined","propTypes","user","object","isRequired","UI","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cards from \"../UI Elements/Cards\";\nimport { getStatusTypes } from \"../../model/Status\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n// Redux\nimport { connect } from \"react-redux\";\n\nclass MyBacklog extends Component {\n  state = {\n    addGameVisible: false,\n    statusTypes: [],\n    filterButtonVisible: true,\n    filterVisible: false,\n    filterIndex: 0\n  };\n\n  componentDidMount() {\n    const statusTypes = getStatusTypes();\n\n    statusTypes.unshift(\"All\");\n\n    this.setState({\n      statusTypes\n    });\n  }\n\n  toggleAddItem = () => {\n    if (this.state.addGameVisible) {\n      this.setState({\n        addItemVisible: false,\n        addItemClasses: \"btn btn-add-item link\"\n      });\n    } else {\n      this.setState({\n        addItemVisible: true,\n        addItemClasses: \"btn btn-add-item btn-selected link\"\n      });\n    }\n  };\n\n  hideAddItem = () => {\n    this.setState({\n      addItemVisible: false,\n      addItemClasses: \"btn link\"\n    });\n  };\n\n  displayAddGame = () => {\n    this.props.history.push(\"/add-game\");\n  };\n\n  filterBacklogGames = i_Games => {\n    let filteredGames;\n    const filterIndex = this.state.filterIndex;\n\n    if (filterIndex != 0) {\n      const statusType = this.state.statusTypes[filterIndex];\n      filteredGames = i_Games.filter(game => {\n        if (game.status === statusType) {\n          return game;\n        }\n      });\n    } else {\n      filteredGames = i_Games;\n    }\n\n    return filteredGames;\n  };\n\n  renderStatBar = i_Games => {\n    const statusTypes = this.state.statusTypes;\n    const gameStatusCount = statusTypes.map(status => {\n      let count = 0;\n      let gameStatus = {};\n      i_Games.forEach(game => {\n        if (game.status === status) {\n          count++;\n        }\n      });\n      gameStatus.status = status;\n      gameStatus.count = count;\n\n      return gameStatus;\n    });\n\n    const statusStats = gameStatusCount.map((gameStatus, index) => {\n      if (index > 0) {\n        return (\n          <React.Fragment key={gameStatus.status}>\n            <p className=\"stat\">{`${gameStatus.status}: ${gameStatus.count}`}</p>\n            {index !== gameStatusCount.length - 1 && (\n              <p className=\"stat stat-separator\">|</p>\n            )}\n          </React.Fragment>\n        );\n      }\n    });\n\n    return (\n      <div className=\"stat-container\">\n        <div className=\"stat-bar\">\n          <p className=\"stat\"># of Games: {i_Games.length}</p>\n          <p className=\"stat stat-separator\">|</p>\n          {statusStats}\n        </div>\n      </div>\n    );\n  };\n\n  renderStatusFilters = () => {\n    let statusTypes = this.state.statusTypes;\n    const filterIndex = this.state.filterIndex;\n    let statusToRender;\n\n    const statusButtonClasses = \"btn btn-status-filter link\";\n    const selectedButtonClass = \"btn-selected-outline\";\n\n    statusToRender = statusTypes.map((status, index) => {\n      const isSelected = index == filterIndex;\n\n      return (\n        <button\n          key={index}\n          value={status}\n          value-index={index}\n          selected={isSelected}\n          className={`${statusButtonClasses} ${isSelected &&\n            selectedButtonClass}`}\n          onClick={this.handleFilterSelect}\n        >\n          {status}\n        </button>\n      );\n    });\n\n    return <React.Fragment>{statusToRender}</React.Fragment>;\n  };\n\n  handleFilterSelect = event => {\n    const { target } = event;\n    const filterIndex = target.getAttribute(\"value-index\");\n\n    this.setState({\n      filterIndex\n    });\n  };\n\n  handleFilterGames = () => {\n    this.setState({\n      filterVisible: !this.state.filterVisible\n    });\n  };\n\n  toggleFilter = i_ActionType => {\n    if (i_ActionType === \"hide\") {\n      this.setState({\n        filterButtonVisible: false,\n        filterVisible: false\n      });\n    } else if (i_ActionType === \"show\") {\n      this.setState({\n        filterButtonVisible: true\n      });\n    }\n  };\n\n  renderCards = i_Games => {\n    return (\n      <div className=\"content card-container\">\n        <Cards\n          games={this.filterBacklogGames(i_Games)}\n          parentComponent={\"My Backlog\"}\n          currentPage={\"My Backlog\"}\n          handleToggleFilter={this.toggleFilter}\n          handleEditGame={this.props.handleEditGame}\n          handleDeleteGame={this.props.handleDeleteGame}\n          handleGetGameFromApi={this.props.handleGetGameFromApi}\n          handleGetGameFromList={this.props.handleGetGameFromList}\n        />\n      </div>\n    );\n  };\n\n  renderContent = i_Games => {\n    return (\n      <React.Fragment>\n        <h1 className=\"page-title\">{this.props.pageName}</h1>\n        <div className=\"main\">\n          <div className=\"option-bar\">\n            <div className=\"option-bar-item\">\n              <Link to=\"/add-game\">\n                <button className=\"btn btn-add-game link\">+ Add Game</button>\n              </Link>\n            </div>\n            <br />\n          </div>\n          {this.renderStatBar(i_Games)}\n          <div className=\"center-container\">\n            {this.state.filterButtonVisible && (\n              <React.Fragment>\n                <button\n                  className=\"btn btn-filter link\"\n                  onClick={this.handleFilterGames}\n                >\n                  Filter\n                </button>\n\n                {!this.state.filterVisible && this.state.filterIndex > 0 && (\n                  <div className=\"status-filter-container \">\n                    {`Status: ${\n                      this.state.statusTypes[this.state.filterIndex]\n                    }`}\n                  </div>\n                )}\n              </React.Fragment>\n            )}\n            {this.state.filterVisible && this.renderStatusFilters()}\n          </div>\n          <div className=\"content\">{this.renderCards(i_Games)}</div>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    let myGames = this.props.games;\n\n    if (myGames === undefined) {\n      myGames = [];\n    }\n\n    return this.renderContent(myGames);\n  }\n}\n\nMyBacklog.propTypes = {\n  user: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps)(MyBacklog);\n"]},"metadata":{},"sourceType":"module"}