{"ast":null,"code":"import { SET_USER, SET_ERRORS, CLEAR_ERRORS, LOADING_UI, LOADING_USER, SET_UNAUTHENTICATED } from \"../types\";\nimport axios from \"axios\";\n\nconst config = require(\"../util/firebaseConfig\");\n\nconst firebase = require(\"firebase\");\n\nfirebase.initializeApp(config);\nexport const loginUser = (userData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/login\", userData).then(result => {\n    setAuthrizationHeader(result.data.token);\n    dispatch(getUserData());\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    history.push(\"/my-backlog\");\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const signInWithFacebook = history => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const provider = new firebase.auth.FacebookAuthProvider();\n  firebase.auth().signInWithPopup(provider).then(result => {\n    const token = result.credential.accessToken;\n    const user = result.user;\n    return {\n      token,\n      user\n    };\n  }).then(data => {\n    const {\n      token,\n      user\n    } = data;\n    setAuthrizationHeader(token);\n    dispatch(getUserData());\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    history.push(\"/my-backlog\");\n  }).catch(err => {\n    console.error(err);\n    return response.status(403).json({\n      general: \"Wrong credentials, please try again\"\n    });\n  }); // axios\n  //   .get(\"/signin/facebook\")\n  //   .then(result => {\n  //     console.log(\"fb\", result);\n  //     const { token, user } = result;\n  //     setAuthrizationHeader(token);\n  //     dispatch(getUserData());\n  //     dispatch({ type: CLEAR_ERRORS });\n  //     history.push(\"/my-backlog\");\n  //   })\n  //   .catch(err => {\n  //     dispatch({\n  //       type: SET_ERRORS,\n  //       payload: err.response.data\n  //     });\n  //   });\n};\nexport const signupUser = (newUserData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post(\"/signup\", newUserData).then(() => {\n    dispatch(getUserData());\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    history.push(\"/login\");\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem(\"firebaseIdToken\");\n  delete axios.defaults.headers.common[\"Authorization\"];\n  dispatch({\n    type: SET_UNAUTHENTICATED\n  });\n};\nexport const getUserData = () => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.get(\"/user\").then(result => {\n    dispatch({\n      type: SET_USER,\n      payload: result.data\n    });\n  }).catch(err => console.log(err));\n};\nexport const sendPasswordResetEmail = i_Email => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const resetPasswordRequest = {\n    email: i_Email\n  };\n  axios.post(\"/user/reset-password\", resetPasswordRequest).then(() => {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    window.alert(`You should recieve password reset instructions ${resetPasswordRequest.email} shortly`);\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n    console.log(err);\n  });\n};\nexport const sendEmailVerification = () => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  return new Promise((resolve, reject) => {\n    axios.post(\"/user/email-verification\").then(() => {\n      dispatch({\n        type: CLEAR_ERRORS\n      });\n      dispatch(getUserData());\n      let emailVerificationMsg = \"Email verification instructions sent.\";\n      window.alert(emailVerificationMsg);\n      resolve(true);\n    }).catch(err => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data\n      });\n      console.log(err);\n      reject(false);\n    });\n  });\n};\nexport const updateUserPassword = i_UpdateRequest => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  const updateRequest = {\n    email: i_UpdateRequest.email,\n    currentPassword: i_UpdateRequest.currentPassword,\n    newPassword: i_UpdateRequest.newPassword,\n    confirmNewPassword: i_UpdateRequest.confirmNewPassword\n  };\n  return new Promise((resolve, reject) => {\n    axios.post(\"/user/update-password\", updateRequest).then(() => {\n      dispatch({\n        type: CLEAR_ERRORS\n      });\n      dispatch(getUserData());\n      let updateSuccessfullMsg = \"Password updated successfully\";\n      window.alert(updateSuccessfullMsg);\n      resolve(true);\n    }).catch(err => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data\n      });\n      console.log(err);\n      reject(false);\n    });\n  });\n};\nexport const updateGames = (username, gameList) => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  const updateRequest = {\n    username: username,\n    games: gameList\n  };\n  axios.post(\"user/games/update\", updateRequest).then(() => {\n    dispatch(getUserData());\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n  }).catch(err => console.log(err));\n};\nexport const deleteAccount = i_Username => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.post(\"user/delete\", i_Username).then(() => {\n    dispatch(logoutUser());\n  }).catch(err => console.log(err));\n};\n\nconst setAuthrizationHeader = token => {\n  const firebaseIdToken = `Bearer ${token}`;\n  localStorage.setItem(\"firebaseIdToken\", firebaseIdToken);\n  axios.defaults.headers.common[\"Authorization\"] = firebaseIdToken;\n};","map":{"version":3,"sources":["/Users/Idan/Projects/Dev/GitHub/BCKLG/src/redux/actions/userActions.js"],"names":["SET_USER","SET_ERRORS","CLEAR_ERRORS","LOADING_UI","LOADING_USER","SET_UNAUTHENTICATED","axios","config","require","firebase","initializeApp","loginUser","userData","history","dispatch","type","post","then","result","setAuthrizationHeader","data","token","getUserData","push","catch","err","payload","response","signInWithFacebook","provider","auth","FacebookAuthProvider","signInWithPopup","credential","accessToken","user","console","error","status","json","general","signupUser","newUserData","logoutUser","localStorage","removeItem","defaults","headers","common","get","log","sendPasswordResetEmail","i_Email","resetPasswordRequest","email","window","alert","sendEmailVerification","Promise","resolve","reject","emailVerificationMsg","updateUserPassword","i_UpdateRequest","updateRequest","currentPassword","newPassword","confirmNewPassword","updateSuccessfullMsg","updateGames","username","gameList","games","deleteAccount","i_Username","firebaseIdToken","setItem"],"mappings":"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","sourcesContent":["import {\n  SET_USER,\n  SET_ERRORS,\n  CLEAR_ERRORS,\n  LOADING_UI,\n  LOADING_USER,\n  SET_UNAUTHENTICATED\n} from \"../types\";\nimport axios from \"axios\";\n\nconst config = require(\"../util/firebaseConfig\");\n\nconst firebase = require(\"firebase\");\nfirebase.initializeApp(config);\n\nexport const loginUser = (userData, history) => dispatch => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(\"/login\", userData)\n    .then(result => {\n      setAuthrizationHeader(result.data.token);\n      dispatch(getUserData());\n      dispatch({ type: CLEAR_ERRORS });\n      history.push(\"/my-backlog\");\n    })\n    .catch(err => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\nexport const signInWithFacebook = history => dispatch => {\n  dispatch({ type: LOADING_UI });\n\n  const provider = new firebase.auth.FacebookAuthProvider();\n\n  firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then(result => {\n      const token = result.credential.accessToken;\n      const user = result.user;\n\n      return { token, user };\n    })\n    .then(data => {\n      const { token, user } = data;\n\n      setAuthrizationHeader(token);\n      dispatch(getUserData());\n      dispatch({ type: CLEAR_ERRORS });\n      history.push(\"/my-backlog\");\n    })\n    .catch(err => {\n      console.error(err);\n      return response\n        .status(403)\n        .json({ general: \"Wrong credentials, please try again\" });\n    });\n\n  // axios\n  //   .get(\"/signin/facebook\")\n  //   .then(result => {\n  //     console.log(\"fb\", result);\n  //     const { token, user } = result;\n  //     setAuthrizationHeader(token);\n  //     dispatch(getUserData());\n  //     dispatch({ type: CLEAR_ERRORS });\n  //     history.push(\"/my-backlog\");\n  //   })\n  //   .catch(err => {\n  //     dispatch({\n  //       type: SET_ERRORS,\n  //       payload: err.response.data\n  //     });\n  //   });\n};\n\nexport const signupUser = (newUserData, history) => dispatch => {\n  dispatch({ type: LOADING_UI });\n  axios\n    .post(\"/signup\", newUserData)\n    .then(() => {\n      dispatch(getUserData());\n      dispatch({ type: CLEAR_ERRORS });\n      history.push(\"/login\");\n    })\n    .catch(err => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem(\"firebaseIdToken\");\n  delete axios.defaults.headers.common[\"Authorization\"];\n  dispatch({ type: SET_UNAUTHENTICATED });\n};\n\nexport const getUserData = () => dispatch => {\n  dispatch({ type: LOADING_USER });\n\n  axios\n    .get(\"/user\")\n    .then(result => {\n      dispatch({\n        type: SET_USER,\n        payload: result.data\n      });\n    })\n    .catch(err => console.log(err));\n};\n\nexport const sendPasswordResetEmail = i_Email => dispatch => {\n  dispatch({ type: LOADING_UI });\n\n  const resetPasswordRequest = {\n    email: i_Email\n  };\n\n  axios\n    .post(\"/user/reset-password\", resetPasswordRequest)\n    .then(() => {\n      dispatch({ type: CLEAR_ERRORS });\n      window.alert(\n        `You should recieve password reset instructions ${resetPasswordRequest.email} shortly`\n      );\n    })\n    .catch(err => {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data\n      });\n      console.log(err);\n    });\n};\n\nexport const sendEmailVerification = () => dispatch => {\n  dispatch({ type: LOADING_UI });\n\n  return new Promise((resolve, reject) => {\n    axios\n      .post(\"/user/email-verification\")\n      .then(() => {\n        dispatch({ type: CLEAR_ERRORS });\n        dispatch(getUserData());\n        let emailVerificationMsg = \"Email verification instructions sent.\";\n        window.alert(emailVerificationMsg);\n        resolve(true);\n      })\n      .catch(err => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n        });\n        console.log(err);\n        reject(false);\n      });\n  });\n};\n\nexport const updateUserPassword = i_UpdateRequest => dispatch => {\n  dispatch({ type: LOADING_UI });\n\n  const updateRequest = {\n    email: i_UpdateRequest.email,\n    currentPassword: i_UpdateRequest.currentPassword,\n    newPassword: i_UpdateRequest.newPassword,\n    confirmNewPassword: i_UpdateRequest.confirmNewPassword\n  };\n\n  return new Promise((resolve, reject) => {\n    axios\n      .post(\"/user/update-password\", updateRequest)\n      .then(() => {\n        dispatch({ type: CLEAR_ERRORS });\n        dispatch(getUserData());\n        let updateSuccessfullMsg = \"Password updated successfully\";\n        window.alert(updateSuccessfullMsg);\n        resolve(true);\n      })\n      .catch(err => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n        });\n        console.log(err);\n        reject(false);\n      });\n  });\n};\n\nexport const updateGames = (username, gameList) => dispatch => {\n  dispatch({ type: LOADING_USER });\n  const updateRequest = {\n    username: username,\n    games: gameList\n  };\n  axios\n    .post(\"user/games/update\", updateRequest)\n    .then(() => {\n      dispatch(getUserData());\n      dispatch({ type: CLEAR_ERRORS });\n    })\n    .catch(err => console.log(err));\n};\n\nexport const deleteAccount = i_Username => dispatch => {\n  dispatch({ type: LOADING_USER });\n  axios\n    .post(\"user/delete\", i_Username)\n    .then(() => {\n      dispatch(logoutUser());\n    })\n    .catch(err => console.log(err));\n};\n\nconst setAuthrizationHeader = token => {\n  const firebaseIdToken = `Bearer ${token}`;\n  localStorage.setItem(\"firebaseIdToken\", firebaseIdToken);\n  axios.defaults.headers.common[\"Authorization\"] = firebaseIdToken;\n};\n"]},"metadata":{},"sourceType":"module"}