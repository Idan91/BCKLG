{"ast":null,"code":"var _jsxFileName = \"/Users/Idan/Projects/Dev/GitHub/BCKLG/src/components/BCKLG Pages/BCKLG.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\"; // Redux\n\nimport { connect } from \"react-redux\";\nimport store from \"../../redux/store\";\nimport { logoutUser, updateGames, sendEmailVerification } from \"../../redux/actions/userActions\";\nimport MyBacklog from \"./MyBacklog\";\nimport Game from \"../../model/Game\";\nimport { searchGame } from \"../../model/Api\";\nimport { loadUserDataFromProps } from \"../../util/Utils\";\n\nclass BCKLG extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoaded: false,\n      rawger: \"\",\n      pageIndex: 0,\n      navbarClasses: [],\n      username: \"\",\n      games: [],\n      verified: \"\",\n      userData: \"\",\n      fetchFailed: false\n    };\n\n    this.startRawger = async () => {\n      const Rawger = require(\"rawger\");\n\n      await Rawger({}).then(data => {\n        this.setState({\n          rawger: data\n        });\n      });\n    };\n\n    this.getGameFromApi = async i_GameSlug => {\n      const Rawger = require(\"rawger\");\n\n      const {\n        games\n      } = await Rawger({});\n      const results = await games.get(i_GameSlug).then(result => {\n        return result.get();\n      }).then(data => {\n        return data.raw;\n      });\n      return results;\n    };\n\n    this.getGameFromList = i_Game => {\n      const {\n        games\n      } = loadUserDataFromProps(this.props);\n      const myGameList = games;\n      let myGame;\n      myGameList.forEach(game => {\n        if (i_Game === game.slug) {\n          myGame = game;\n        }\n      });\n      return myGame;\n    };\n\n    this.editGame = (i_Game, i_Platform, i_Status) => {\n      const {\n        username,\n        games\n      } = loadUserDataFromProps(this.props);\n      const myGameList = games;\n      const newGame = new Game(i_Game.raw, i_Platform, i_Status);\n      const newGameList = myGameList.map(game => {\n        if (game.name === i_Game.raw.name) {\n          return newGame;\n        } else {\n          return game;\n        }\n      });\n      this.props.updateGames(username, newGameList);\n    };\n\n    this.deleteGame = i_Game => {\n      const {\n        username,\n        games\n      } = loadUserDataFromProps(this.props);\n      const myGameList = games;\n      const newGameList = myGameList.filter(game => {\n        let listGame;\n\n        if (!(game.name === i_Game.raw.name)) {\n          listGame = game;\n        }\n\n        return listGame;\n      });\n      this.props.updateGames(username, newGameList);\n    };\n\n    this.loadUserDataFromProps = () => {\n      const {\n        user: {\n          credentials: {\n            username,\n            games,\n            emailVerified\n          },\n          loading,\n          authenticated\n        }\n      } = this.props;\n      const {\n        user\n      } = this.props;\n      return {\n        user,\n        username,\n        games,\n        emailVerified,\n        loading,\n        authenticated\n      };\n    };\n\n    this.onSwitchPage = i_Index => {\n      this.setState({\n        pageIndex: i_Index\n      });\n    };\n\n    this.handleLogout = () => {\n      try {\n        this.props.logoutUser();\n        this.setState({\n          popupVisible: false\n        });\n        this.props.history.push(\"/login\");\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.renderBacklog = () => {\n      const {\n        games,\n        loading,\n        authenticated\n      } = loadUserDataFromProps(this.props);\n      setTimeout(() => {\n        const fetchedGames = loadUserDataFromProps(this.props).games;\n\n        if (!this.state.fetchFailed && (fetchedGames === null || fetchedGames === undefined)) {\n          window.alert(\"Could not authenticate/retrieve user data. Please log in again\");\n          this.setState({\n            fetchFailed: true\n          });\n          store.dispatch(logoutUser());\n        }\n      }, 4500);\n      const content = React.createElement(MyBacklog, {\n        pageName: \"My Backlog\",\n        games: games,\n        handleSearch: searchGame,\n        handleAddGame: this.addGameToList,\n        handleEditGame: this.editGame,\n        handleDeleteGame: this.deleteGame,\n        handleGetGameFromApi: this.getGameFromApi,\n        handleGetGameFromList: this.getGameFromList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      });\n      const loader = React.createElement(\"div\", {\n        className: \"page-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"loader-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, loading && React.createElement(\"div\", {\n        className: \"loader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      })))));\n      const unverified = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"page-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"center-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"page-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Your email is not verified!\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"unverified-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"In order to use BCKLG, please click the button below and follow the instructions sent your email.\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn link\",\n        onClick: this.props.sendEmailVerification,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Send verification email\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Once you've verified your email, logout and re-login to use BCKLG.\"), React.createElement(\"button\", {\n        className: \"btn nav-link link btn-pop-up\",\n        onClick: this.handleLogout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Logout\"))))));\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, !loading ? authenticated ? content : this.props.history.push(\"/\") : loader);\n    };\n  }\n\n  /* #region  LIFE-CYCLE METHODS */\n  componentDidMount() {\n    this.startRawger();\n  }\n  /* #endregion */\n\n  /* #region  API METHODS */\n\n\n  /* #endregion */\n  render() {\n    return this.renderBacklog();\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nconst mapActionsToProps = {\n  logoutUser,\n  updateGames,\n  sendEmailVerification\n};\nBCKLG.propTypes = {\n  user: PropTypes.object.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  updateGames: PropTypes.func.isRequired,\n  sendEmailVerification: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapActionsToProps)(BCKLG);","map":{"version":3,"sources":["/Users/Idan/Projects/Dev/GitHub/BCKLG/src/components/BCKLG Pages/BCKLG.js"],"names":["React","Component","PropTypes","connect","store","logoutUser","updateGames","sendEmailVerification","MyBacklog","Game","searchGame","loadUserDataFromProps","BCKLG","state","isLoaded","rawger","pageIndex","navbarClasses","username","games","verified","userData","fetchFailed","startRawger","Rawger","require","then","data","setState","getGameFromApi","i_GameSlug","results","get","result","raw","getGameFromList","i_Game","props","myGameList","myGame","forEach","game","slug","editGame","i_Platform","i_Status","newGame","newGameList","map","name","deleteGame","filter","listGame","user","credentials","emailVerified","loading","authenticated","onSwitchPage","i_Index","handleLogout","popupVisible","history","push","err","console","log","renderBacklog","setTimeout","fetchedGames","undefined","window","alert","dispatch","content","addGameToList","loader","unverified","componentDidMount","render","mapStateToProps","mapActionsToProps","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n// Redux\nimport { connect } from \"react-redux\";\nimport store from \"../../redux/store\";\n\nimport {\n  logoutUser,\n  updateGames,\n  sendEmailVerification\n} from \"../../redux/actions/userActions\";\nimport MyBacklog from \"./MyBacklog\";\nimport Game from \"../../model/Game\";\nimport { searchGame } from \"../../model/Api\";\nimport { loadUserDataFromProps } from \"../../util/Utils\";\n\nclass BCKLG extends Component {\n  state = {\n    isLoaded: false,\n    rawger: \"\",\n    pageIndex: 0,\n    navbarClasses: [],\n    username: \"\",\n    games: [],\n    verified: \"\",\n    userData: \"\",\n    fetchFailed: false\n  };\n\n  /* #region  LIFE-CYCLE METHODS */\n  componentDidMount() {\n    this.startRawger();\n  }\n  /* #endregion */\n\n  /* #region  API METHODS */\n  startRawger = async () => {\n    const Rawger = require(\"rawger\");\n    await Rawger({}).then(data => {\n      this.setState({\n        rawger: data\n      });\n    });\n  };\n\n  getGameFromApi = async i_GameSlug => {\n    const Rawger = require(\"rawger\");\n    const { games } = await Rawger({});\n    const results = await games\n      .get(i_GameSlug)\n      .then(result => {\n        return result.get();\n      })\n      .then(data => {\n        return data.raw;\n      });\n\n    return results;\n  };\n\n  /* #endregion */\n\n  /* #region  GAME METHODS */\n  getGameFromList = i_Game => {\n    const { games } = loadUserDataFromProps(this.props);\n\n    const myGameList = games;\n    let myGame;\n\n    myGameList.forEach(game => {\n      if (i_Game === game.slug) {\n        myGame = game;\n      }\n    });\n\n    return myGame;\n  };\n\n  editGame = (i_Game, i_Platform, i_Status) => {\n    const { username, games } = loadUserDataFromProps(this.props);\n\n    const myGameList = games;\n    const newGame = new Game(i_Game.raw, i_Platform, i_Status);\n\n    const newGameList = myGameList.map(game => {\n      if (game.name === i_Game.raw.name) {\n        return newGame;\n      } else {\n        return game;\n      }\n    });\n\n    this.props.updateGames(username, newGameList);\n  };\n\n  deleteGame = i_Game => {\n    const { username, games } = loadUserDataFromProps(this.props);\n\n    const myGameList = games;\n\n    const newGameList = myGameList.filter(game => {\n      let listGame;\n      if (!(game.name === i_Game.raw.name)) {\n        listGame = game;\n      }\n      return listGame;\n    });\n\n    this.props.updateGames(username, newGameList);\n  };\n\n  loadUserDataFromProps = () => {\n    const {\n      user: {\n        credentials: { username, games, emailVerified },\n        loading,\n        authenticated\n      }\n    } = this.props;\n\n    const { user } = this.props;\n\n    return { user, username, games, emailVerified, loading, authenticated };\n  };\n  /* #endregion */\n\n  /* #region  UI METHODS */\n  onSwitchPage = i_Index => {\n    this.setState({\n      pageIndex: i_Index\n    });\n  };\n\n  handleLogout = () => {\n    try {\n      this.props.logoutUser();\n      this.setState({\n        popupVisible: false\n      });\n      this.props.history.push(\"/login\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  renderBacklog = () => {\n    const { games, loading, authenticated } = loadUserDataFromProps(this.props);\n\n    setTimeout(() => {\n      const fetchedGames = loadUserDataFromProps(this.props).games;\n\n      if (\n        !this.state.fetchFailed &&\n        (fetchedGames === null || fetchedGames === undefined)\n      ) {\n        window.alert(\n          \"Could not authenticate/retrieve user data. Please log in again\"\n        );\n        this.setState({\n          fetchFailed: true\n        });\n        store.dispatch(logoutUser());\n      }\n    }, 4500);\n\n    const content = (\n      <MyBacklog\n        pageName=\"My Backlog\"\n        games={games}\n        handleSearch={searchGame}\n        handleAddGame={this.addGameToList}\n        handleEditGame={this.editGame}\n        handleDeleteGame={this.deleteGame}\n        handleGetGameFromApi={this.getGameFromApi}\n        handleGetGameFromList={this.getGameFromList}\n      />\n    );\n\n    const loader = (\n      <div className=\"page-container\">\n        <div className=\"main\">\n          <div className=\"content\">\n            <br />\n            <br />\n            <div className=\"loader-container\">\n              {loading && <div className=\"loader\" />}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n    const unverified = (\n      <React.Fragment>\n        <div className=\"page-container\">\n          <div className=\"main\">\n            <div className=\"content\">\n              <div className=\"center-container\">\n                <h2 className=\"page-title\">Your email is not verified!</h2>\n                <br />\n                <p className=\"unverified-body\">\n                  In order to use BCKLG, please click the button below and\n                  follow the instructions sent your email.\n                </p>\n                <br />\n                <button\n                  className=\"btn link\"\n                  onClick={this.props.sendEmailVerification}\n                >\n                  Send verification email\n                </button>\n                <br />\n                <br />\n                <p>\n                  Once you've verified your email, logout and re-login to use\n                  BCKLG.\n                </p>\n                <button\n                  className=\"btn nav-link link btn-pop-up\"\n                  onClick={this.handleLogout}\n                >\n                  Logout\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n\n    return (\n      <React.Fragment>\n        {!loading\n          ? authenticated\n            ? content\n            : this.props.history.push(\"/\")\n          : loader}\n      </React.Fragment>\n    );\n  };\n  /* #endregion */\n\n  render() {\n    return this.renderBacklog();\n  }\n}\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nconst mapActionsToProps = {\n  logoutUser,\n  updateGames,\n  sendEmailVerification\n};\n\nBCKLG.propTypes = {\n  user: PropTypes.object.isRequired,\n  logoutUser: PropTypes.func.isRequired,\n  updateGames: PropTypes.func.isRequired,\n  sendEmailVerification: PropTypes.func.isRequired\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(BCKLG);\n"]},"metadata":{},"sourceType":"module"}