{"ast":null,"code":"var _jsxFileName = \"/Users/Idan/Documents/GitHub/Idan91/BCKLG/bcklg/src/components/BCKLG Pages/AddGame.js\";\nimport React, { Component } from \"react\";\nimport Cards from \"../UI Elements/Cards\";\nimport Game from \"../../model/Game\";\nimport { getGameFromApi, searchGame } from \"../../model/Api\";\nimport { loadUserDataFromProps } from \"../../util/Utils\";\nimport { updateGames } from \"../../redux/actions/userActions\";\nimport PropTypes from \"prop-types\"; // Redux\n\nimport { connect } from \"react-redux\";\n\nclass AddGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchResults: [],\n      query: \"\",\n      year: 2020,\n      errorMessage: \"Could not find game! Please try again\",\n      displayErrorMessage: false,\n      searchInitiated: false,\n      searchVisible: true,\n      gameBuffer: []\n    };\n\n    this.handleInputChange = event => {\n      let newQuery = event.target.value;\n      this.setState({\n        query: newQuery\n      });\n    };\n\n    this.handleSubmitSearch = event => {\n      this.renderSearchResults(this.state.query);\n    };\n\n    this.renderSearchResults = async i_GameName => {\n      this.setState({\n        displayErrorMessage: false\n      });\n      let allResults = [];\n      let results = await searchGame(i_GameName).then(data => {\n        return data;\n      }).catch(err => {\n        console.log(err);\n      });\n\n      if (typeof results === typeof \"string\") {\n        this.setState({\n          displayErrorMessage: true\n        });\n        return;\n      }\n\n      allResults = results;\n      this.setState({\n        searchResults: allResults,\n        searchInitiated: true\n      });\n    };\n\n    this.populateYears = () => {\n      const currentYear = new Date().getFullYear();\n      let yearArray = [];\n\n      for (let i = currentYear; i > 1969; i--) {\n        yearArray.push(React.createElement(\"option\", {\n          className: \"year\",\n          key: i,\n          value: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, i));\n      }\n\n      return yearArray;\n    };\n\n    this.handleKeyDown = event => {\n      if (event.keyCode === 13) {\n        this.renderSearchResults(this.state.query);\n      }\n    };\n\n    this.handleChange = event => {\n      const {\n        value\n      } = event.target;\n      this.setState({\n        year: value\n      });\n    };\n\n    this.handleSearchPreset = async event => {\n      const {\n        name\n      } = event.target;\n      const year = this.state.year;\n      let linkSuffix;\n\n      if (name === \"Most Popular\") {\n        linkSuffix = `added`;\n      } else {\n        linkSuffix = `rating`;\n      }\n\n      fetch(`https://api.rawg.io/api/games?dates=${year}-01-01,${year}-12-31&ordering=-${linkSuffix}`).then(result => {\n        return result.json();\n      }).then(data => {\n        this.setState({\n          searchResults: data.results\n        });\n      });\n    };\n\n    this.toggleSearchVisibility = () => {\n      if (this.state.searchVisible) {\n        this.setState({\n          searchVisible: false\n        });\n      } else {\n        this.setState({\n          searchVisible: true\n        });\n      }\n    };\n\n    this.gameExists = (i_Game, i_GameList) => {\n      let exists = false;\n\n      if (i_GameList !== undefined && i_GameList.length > 0) {\n        i_GameList.forEach(game => {\n          if (game.slug === i_Game) {\n            exists = true;\n          }\n        });\n      }\n\n      return exists;\n    };\n\n    this.addGameToList = async (i_Game, i_Platform, i_Status) => {\n      const {\n        username,\n        games\n      } = loadUserDataFromProps(this.props);\n      let myGameList = games;\n      const gameExists = this.gameExists(i_Game, myGameList);\n\n      if (gameExists) {\n        alert(\"Game already exits!\");\n      } else {\n        let game = await getGameFromApi(i_Game).then(data => {\n          return data;\n        }).then(resolvedGame => {\n          const convertedGame = Game.convertToGameObject(resolvedGame, i_Platform, i_Status);\n          return convertedGame;\n        }).catch(e => {\n          console.log(e);\n        });\n\n        if (myGameList !== undefined && myGameList.length > 0) {\n          myGameList.unshift(game);\n        } else {\n          myGameList = [game];\n        }\n\n        this.props.updateGames(username, myGameList);\n      }\n    };\n\n    this.handleClose = () => {\n      this.props.history.push(\"/my-backlog\");\n    };\n\n    this.renderSearchContainer = () => {\n      if (this.state.searchVisible) {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"sub-page-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn link btn-close\",\n          onClick: this.handleClose,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, \"Close\")), React.createElement(\"div\", {\n          className: \"search-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"search\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          className: \"search-box\",\n          placeholder: \"Which game are you looking for?\",\n          value: this.state.query,\n          onChange: this.handleInputChange,\n          onKeyDown: this.handleKeyDown,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: \"btn-search link\",\n          onClick: this.handleSubmitSearch,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }, \"Search\")), React.createElement(\"div\", {\n          className: \"search-presets\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"btn-search link preset\",\n          onClick: this.handleSearchPreset,\n          name: \"Most Popular\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }, \"Most Popular\"), React.createElement(\"button\", {\n          className: \"btn-search link preset\",\n          onClick: this.handleSearchPreset,\n          name: \"Highest Rated\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, \"Highest Rated\"), React.createElement(\"select\", {\n          className: \"btn-search link preset year-select\",\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }, this.populateYears()))));\n      }\n    };\n  }\n\n  renderItems() {\n    if (this.state.displayErrorMessage || this.state.searchResults.length < 1 && this.state.searchInitiated) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.state.errorMessage);\n    } else {\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content card-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Cards, {\n        games: this.state.searchResults,\n        parentComponent: \"Add Game\",\n        currentPage: \"Add Game\",\n        handleAddGame: this.addGameToList,\n        handleGetGameFromApi: getGameFromApi,\n        handleGetGameFromList: this.props.handleGetGameFromList,\n        handleSearchVisibility: this.toggleSearchVisibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })));\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inner-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"page-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"Add Game\"), React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, this.renderSearchContainer(), this.renderItems())));\n  }\n\n}\n\nAddGame.propTypes = {\n  user: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired,\n  updateGames: PropTypes.func.isRequired\n};\nconst mapActionsToProps = {\n  updateGames\n};\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, mapActionsToProps)(AddGame);","map":{"version":3,"sources":["/Users/Idan/Documents/GitHub/Idan91/BCKLG/bcklg/src/components/BCKLG Pages/AddGame.js"],"names":["React","Component","Cards","Game","getGameFromApi","searchGame","loadUserDataFromProps","updateGames","PropTypes","connect","AddGame","state","searchResults","query","year","errorMessage","displayErrorMessage","searchInitiated","searchVisible","gameBuffer","handleInputChange","event","newQuery","target","value","setState","handleSubmitSearch","renderSearchResults","i_GameName","allResults","results","then","data","catch","err","console","log","populateYears","currentYear","Date","getFullYear","yearArray","i","push","handleKeyDown","keyCode","handleChange","handleSearchPreset","name","linkSuffix","fetch","result","json","toggleSearchVisibility","gameExists","i_Game","i_GameList","exists","undefined","length","forEach","game","slug","addGameToList","i_Platform","i_Status","username","games","props","myGameList","alert","resolvedGame","convertedGame","convertToGameObject","e","unshift","handleClose","history","renderSearchContainer","renderItems","handleGetGameFromList","render","propTypes","user","object","isRequired","UI","func","mapActionsToProps","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cards from \"../UI Elements/Cards\";\nimport Game from \"../../model/Game\";\nimport { getGameFromApi, searchGame } from \"../../model/Api\";\nimport { loadUserDataFromProps } from \"../../util/Utils\";\nimport { updateGames } from \"../../redux/actions/userActions\";\nimport PropTypes from \"prop-types\";\n// Redux\nimport { connect } from \"react-redux\";\n\nclass AddGame extends Component {\n  state = {\n    searchResults: [],\n    query: \"\",\n    year: 2020,\n    errorMessage: \"Could not find game! Please try again\",\n    displayErrorMessage: false,\n    searchInitiated: false,\n    searchVisible: true,\n    gameBuffer: []\n  };\n\n  handleInputChange = event => {\n    let newQuery = event.target.value;\n    this.setState({\n      query: newQuery\n    });\n  };\n\n  handleSubmitSearch = event => {\n    this.renderSearchResults(this.state.query);\n  };\n\n  renderSearchResults = async i_GameName => {\n    this.setState({\n      displayErrorMessage: false\n    });\n\n    let allResults = [];\n\n    let results = await searchGame(i_GameName)\n      .then(data => {\n        return data;\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n    if (typeof results === typeof \"string\") {\n      this.setState({ displayErrorMessage: true });\n      return;\n    }\n\n    allResults = results;\n\n    this.setState({\n      searchResults: allResults,\n      searchInitiated: true\n    });\n  };\n\n  renderItems() {\n    if (\n      this.state.displayErrorMessage ||\n      (this.state.searchResults.length < 1 && this.state.searchInitiated)\n    ) {\n      return <h2>{this.state.errorMessage}</h2>;\n    } else {\n      return (\n        <div className=\"content\">\n          <div className=\"content card-container\">\n            <Cards\n              games={this.state.searchResults}\n              parentComponent={\"Add Game\"}\n              currentPage={\"Add Game\"}\n              handleAddGame={this.addGameToList}\n              handleGetGameFromApi={getGameFromApi}\n              handleGetGameFromList={this.props.handleGetGameFromList}\n              handleSearchVisibility={this.toggleSearchVisibility}\n            />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  populateYears = () => {\n    const currentYear = new Date().getFullYear();\n\n    let yearArray = [];\n\n    for (let i = currentYear; i > 1969; i--) {\n      yearArray.push(\n        <option className=\"year\" key={i} value={i}>\n          {i}\n        </option>\n      );\n    }\n\n    return yearArray;\n  };\n\n  handleKeyDown = event => {\n    if (event.keyCode === 13) {\n      this.renderSearchResults(this.state.query);\n    }\n  };\n\n  handleChange = event => {\n    const { value } = event.target;\n    this.setState({\n      year: value\n    });\n  };\n\n  handleSearchPreset = async event => {\n    const { name } = event.target;\n    const year = this.state.year;\n    let linkSuffix;\n\n    if (name === \"Most Popular\") {\n      linkSuffix = `added`;\n    } else {\n      linkSuffix = `rating`;\n    }\n\n    fetch(\n      `https://api.rawg.io/api/games?dates=${year}-01-01,${year}-12-31&ordering=-${linkSuffix}`\n    )\n      .then(result => {\n        return result.json();\n      })\n      .then(data => {\n        this.setState({\n          searchResults: data.results\n        });\n      });\n  };\n\n  toggleSearchVisibility = () => {\n    if (this.state.searchVisible) {\n      this.setState({\n        searchVisible: false\n      });\n    } else {\n      this.setState({\n        searchVisible: true\n      });\n    }\n  };\n\n  gameExists = (i_Game, i_GameList) => {\n    let exists = false;\n\n    if (i_GameList !== undefined && i_GameList.length > 0) {\n      i_GameList.forEach(game => {\n        if (game.slug === i_Game) {\n          exists = true;\n        }\n      });\n    }\n\n    return exists;\n  };\n\n  addGameToList = async (i_Game, i_Platform, i_Status) => {\n    const { username, games } = loadUserDataFromProps(this.props);\n\n    let myGameList = games;\n\n    const gameExists = this.gameExists(i_Game, myGameList);\n\n    if (gameExists) {\n      alert(\"Game already exits!\");\n    } else {\n      let game = await getGameFromApi(i_Game)\n        .then(data => {\n          return data;\n        })\n        .then(resolvedGame => {\n          const convertedGame = Game.convertToGameObject(\n            resolvedGame,\n            i_Platform,\n            i_Status\n          );\n\n          return convertedGame;\n        })\n        .catch(e => {\n          console.log(e);\n        });\n\n      if (myGameList !== undefined && myGameList.length > 0) {\n        myGameList.unshift(game);\n      } else {\n        myGameList = [game];\n      }\n\n      this.props.updateGames(username, myGameList);\n    }\n  };\n\n  handleClose = () => {\n    this.props.history.push(\"/my-backlog\");\n  };\n\n  renderSearchContainer = () => {\n    if (this.state.searchVisible) {\n      return (\n        <React.Fragment>\n          <div className=\"sub-page-header\">\n            <button className=\"btn link btn-close\" onClick={this.handleClose}>\n              Close\n            </button>\n          </div>\n          <div className=\"search-container\">\n            <div className=\"search\">\n              <input\n                type=\"text\"\n                className=\"search-box\"\n                placeholder=\"Which game are you looking for?\"\n                value={this.state.query}\n                onChange={this.handleInputChange}\n                onKeyDown={this.handleKeyDown}\n              ></input>\n              <button\n                className=\"btn-search link\"\n                onClick={this.handleSubmitSearch}\n              >\n                Search\n              </button>\n            </div>\n            <div className=\"search-presets\">\n              <button\n                className=\"btn-search link preset\"\n                onClick={this.handleSearchPreset}\n                name=\"Most Popular\"\n              >\n                Most Popular\n              </button>\n              <button\n                className=\"btn-search link preset\"\n                onClick={this.handleSearchPreset}\n                name=\"Highest Rated\"\n              >\n                Highest Rated\n              </button>\n              <select\n                className=\"btn-search link preset year-select\"\n                onChange={this.handleChange}\n              >\n                {this.populateYears()}\n              </select>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"inner-body\">\n          <h1 className=\"page-title\">Add Game</h1>\n          <div className=\"main\">\n            {this.renderSearchContainer()}\n            {this.renderItems()}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nAddGame.propTypes = {\n  user: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired,\n  updateGames: PropTypes.func.isRequired\n};\n\nconst mapActionsToProps = { updateGames };\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, mapActionsToProps)(AddGame);\n"]},"metadata":{},"sourceType":"module"}